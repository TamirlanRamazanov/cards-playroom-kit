import type { GameState, Card } from "../types";
import GameOverModal from "./GameOverModal";
import { useState, useEffect } from "react";
import { DndContext, DragOverlay } from "@dnd-kit/core";
import type { DragEndEvent, DragStartEvent } from "@dnd-kit/core";
// import DraggableCard from "./DraggableCard";
import DropZone from "./DropZone";
import DefenseZone from "./DefenseZone";
import { FACTIONS } from "../engine/cards";

interface Props {
    myId: string;
    game: GameState;
    updateGame: (updater: (prev: GameState) => GameState) => void;
}

export default function GameBoard({ myId, game, updateGame }: Props) {
    // Inline styles as fallback for Vercel compatibility
    const gameButtonStyle = {
        borderRadius: '4px',
        padding: '4px 8px',
        fontSize: '11px',
        border: 'none',
        color: '#fff',
        cursor: 'pointer',
        fontWeight: '500',
        transition: 'all 0.2s ease',
    } as React.CSSProperties;
    const playerIds = Object.keys(game.players || {});
    const myHand = game.hands[myId] || [];

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è drag&drop
    const [activeCard, setActiveCard] = useState<{ card: Card; index: number; source: string } | null>(null);
    const [hoveredAttackCard, setHoveredAttackCard] = useState<number | null>(null);
    const [hoveredDefenseCard, setHoveredDefenseCard] = useState<number | null>(null);
    const [mousePosition, setMousePosition] = useState<{ x: number; y: number } | null>(null);
    const [showSensorCircle, setShowSensorCircle] = useState<boolean>(false);
    const [activeDropZone, setActiveDropZone] = useState<string | null>(null);
    // const [invalidDefenseCard, setInvalidDefenseCard] = useState<number | null>(null);
    // const [canTakeCards, setCanTakeCards] = useState<boolean>(false);
    const [defenseCards, setDefenseCards] = useState<(Card | null)[]>([]); // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç –∑–∞—â–∏—Ç—ã
    const [isUpdatingDefenseCards] = useState<boolean>(false); // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
    const [gameMode, setGameMode] = useState<'attack' | 'defense'>('attack');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ—Ä–∞–∫—Ü–∏–π
    const factionCounter = game.factionCounter || {};
    const activeFactions = game.displayActiveFactions || [];
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const [showGameInitialization, setShowGameInitialization] = useState<boolean>(false);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    useEffect(() => {
        if (game.gameInitialized && !showGameInitialization) {
            initializeGameForPlayer();
        }
    }, [game.gameInitialized]);

    // useEffect –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ div –∑–∞—â–∏—Ç—ã —Å div –∞—Ç–∞–∫–∏
    useEffect(() => {
        syncDefenseZoneSize();
    }, [game.slots]);

    // useEffect –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—Ä–∞–∫—Ü–∏–π
    useEffect(() => {
        updateActiveFactionsDisplay();
    }, [game.slots, game.defenseSlots, game.activeFirstAttackFactions, game.usedDefenseCardFactions]);

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º—ã—à–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
    useEffect(() => {
        if (showSensorCircle || activeCard) {
            const handleGlobalMouseMove = (e: MouseEvent) => {
                setMousePosition({ x: e.clientX, y: e.clientY });
            };

            document.addEventListener('mousemove', handleGlobalMouseMove);

            return () => {
                document.removeEventListener('mousemove', handleGlobalMouseMove);
            };
        }
    }, [showSensorCircle, activeCard]);

    // useEffect –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ defenseCards —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º game.defenseSlots
    useEffect(() => {
        const globalDefense = game.defenseSlots || [];
        if (isUpdatingDefenseCards) {
            return;
        }
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ—Å—Ç–∞–≤ –ø–æ id –∫–∞—Ä—Ç, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const toKey = (arr: (Card | null)[]) => arr.map(c => (c ? c.id : null)).join("|");
        const localKey = toKey(defenseCards);
        const globalKey = toKey(globalDefense);
        if (localKey !== globalKey) {
            setDefenseCards(globalDefense);
        }
    }, [game.defenseSlots, isUpdatingDefenseCards]);

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ hover —Å–æ–±—ã—Ç–∏–π
    const handleAttackCardHover = (index: number) => {
        console.log(`üéØ Hover attack card: ${index}`);
        setHoveredAttackCard(index);
    };

    const handleAttackCardLeave = () => {
        console.log(`üéØ Leave attack card`);
        setHoveredAttackCard(null);
    };

    const handleDefenseCardHover = (index: number) => {
        console.log(`üéØ Hover defense card: ${index}`);
        // –¢–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –∞—Ç–∞–∫–∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã
        if (gameMode === 'attack') {
            setHoveredDefenseCard(index);
        }
    };

    const handleDefenseCardLeave = () => {
        console.log(`üéØ Leave defense card`);
        setHoveredDefenseCard(null);
    };

    const handleDefenseCardSlotHover = (attackIndex: number) => {
        console.log(`üéØ Hover defense card slot: ${attackIndex}, gameMode: ${gameMode}, role: ${getCurrentPlayerRole()}`);
        setHoveredDefenseCard(attackIndex);
    };

    const handleDefenseCardSlotLeave = () => {
        console.log(`üéØ Leave defense card slot, gameMode: ${gameMode}, role: ${getCurrentPlayerRole()}`);
        setHoveredDefenseCard(null);
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è drop zone –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    const handleDropZoneActivate = (zoneId: string) => {
        console.log(`üéØ Drop zone activated: ${zoneId}`);
        setActiveDropZone(zoneId);
    };

    const handleDropZoneDeactivate = () => {
        console.log(`üéØ Drop zone deactivated`);
        setActiveDropZone(null);
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã
    const initializeGameForPlayer = () => {
        if (game.gameInitialized && !showGameInitialization) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∏–≥—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–∞
            const playerRole = getCurrentPlayerRole();
            if (playerRole === 'attacker' || playerRole === 'co-attacker') {
                setGameMode('attack');
            } else if (playerRole === 'defender') {
                setGameMode('defense');
            } else {
                setGameMode('attack'); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
            }
            
            setShowGameInitialization(true);
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 6 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                setShowGameInitialization(false);
            }, 6000);
        }
    };

    const resetGameState = () => {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–π
        updateGame(prev => ({
            ...prev,
            factionCounter: {},
            activeFirstAttackFactions: [],
            usedDefenseCardFactions: {},
            displayActiveFactions: []
        }));
        setDefenseCards([]);
        setGameMode('attack');
        setShowGameInitialization(false);
        clearDrawQueue();
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–æ–ª—è–º–∏
    const getCurrentPlayerRole = (): 'attacker' | 'co-attacker' | 'defender' | 'observer' | null => {
        return game.playerRoles?.[myId] || null;
    };

    const canPlayerAttack = (): boolean => {
        const role = getCurrentPlayerRole();
        if (!role || (role !== 'attacker' && role !== 'co-attacker')) return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞—Ç–∞–∫–∏
        if (role === 'attacker' && game.attackPriority === 'co-attacker') return false;
        if (role === 'co-attacker' && game.attackPriority === 'attacker') return false;
        
        // –°–æ-–∞—Ç–∞–∫—É—é—â–∏–π –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≥–ª–∞–≤–Ω—ã–π –∞—Ç–∞–∫—É—é—â–∏–π –ø–æ–¥–∫–∏–Ω—É–ª –∫–∞—Ä—Ç—É
        if (role === 'co-attacker' && !game.mainAttackerHasPlayed) return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ "–ü–∞—Å"
        if (role === 'attacker' && game.attackerPassed) return false;
        if (role === 'co-attacker' && game.coAttackerPassed) return false;
        
        return true;
    };

    const hasUnbeatenCards = (): boolean => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏ –±–µ–∑ –∑–∞—â–∏—Ç—ã
        const attackCards = game.slots?.filter(slot => slot !== null) || [];
        const defenseCardsCount = defenseCards.filter(slot => slot !== null).length;
        return attackCards.length > defenseCardsCount;
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ë–∏—Ç–æ" –∏ "–ü–∞—Å"
    const handleBito = () => {
        const role = getCurrentPlayerRole();
        if (!role || (role !== 'attacker' && role !== 'co-attacker')) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–ª–∞–≤–Ω—ã–π –∞—Ç–∞–∫—É—é—â–∏–π —É–∂–µ –∏–≥—Ä–∞–ª
        if (!game.mainAttackerHasPlayed) {
            alert('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–∫–∏–Ω—É—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ä—Ç—É!');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã
        if (hasUnbeatenCards()) {
            alert('‚ùå –ù–µ –≤—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã! –°–Ω–∞—á–∞–ª–∞ –æ—Ç–±–µ–π—Ç–µ –≤—Å–µ –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏.');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ "–ü–∞—Å"
        if ((role === 'attacker' && game.attackerPassed) || (role === 'co-attacker' && game.coAttackerPassed)) {
            alert('‚ùå –í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ "–ü–∞—Å"!');
            return;
        }
        
        updateGame((prev) => {
            let newState = { ...prev };
            
            if (role === 'attacker') {
                // –ì–ª–∞–≤–Ω—ã–π –∞—Ç–∞–∫—É—é—â–∏–π –Ω–∞–∂–∞–ª "–ë–∏—Ç–æ" - –ø–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–æ-–∞—Ç–∞–∫—É—é—â–µ–º—É
                newState.attackPriority = 'co-attacker';
                newState.attackerBitoPressed = true;
                newState.coAttackerBitoPressed = false; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å–æ-–∞—Ç–∞–∫—É—é—â–µ–≥–æ
                console.log('üéØ –ì–ª–∞–≤–Ω—ã–π –∞—Ç–∞–∫—É—é—â–∏–π –Ω–∞–∂–∞–ª "–ë–∏—Ç–æ" - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω —Å–æ-–∞—Ç–∞–∫—É—é—â–µ–º—É');
            } else if (role === 'co-attacker') {
                // –°–æ-–∞—Ç–∞–∫—É—é—â–∏–π –Ω–∞–∂–∞–ª "–ë–∏—Ç–æ" - –ø–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≥–ª–∞–≤–Ω–æ–º—É –∞—Ç–∞–∫—É—é—â–µ–º—É
                newState.attackPriority = 'attacker';
                newState.coAttackerBitoPressed = true;
                newState.attackerBitoPressed = false; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –∞—Ç–∞–∫—É—é—â–µ–≥–æ
                console.log('üéØ –°–æ-–∞—Ç–∞–∫—É—é—â–∏–π –Ω–∞–∂–∞–ª "–ë–∏—Ç–æ" - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≥–ª–∞–≤–Ω–æ–º—É –∞—Ç–∞–∫—É—é—â–µ–º—É');
            }
            
            return newState;
        });
    };

    const handlePas = () => {
        const role = getCurrentPlayerRole();
        if (!role || (role !== 'attacker' && role !== 'co-attacker')) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–ª–∞–≤–Ω—ã–π –∞—Ç–∞–∫—É—é—â–∏–π —É–∂–µ –∏–≥—Ä–∞–ª
        if (!game.mainAttackerHasPlayed) {
            alert('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–∫–∏–Ω—É—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ä—Ç—É!');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã
        if (hasUnbeatenCards()) {
            alert('‚ùå –ù–µ –≤—Å–µ –∫–∞—Ä—Ç—ã –æ—Ç–±–∏—Ç—ã! –°–Ω–∞—á–∞–ª–∞ –æ—Ç–±–µ–π—Ç–µ –≤—Å–µ –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏.');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ "–ü–∞—Å"
        if ((role === 'attacker' && game.attackerPassed) || (role === 'co-attacker' && game.coAttackerPassed)) {
            alert('‚ùå –í—ã —É–∂–µ –Ω–∞–∂–∞–ª–∏ "–ü–∞—Å"!');
            return;
        }
        
        updateGame((prev) => {
            let newState = { ...prev };
            
            if (role === 'attacker') {
                newState.attackerPassed = true;
                newState.attackerPasPressed = true;
                newState.coAttackerBitoPressed = false; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å–æ-–∞—Ç–∞–∫—É—é—â–µ–≥–æ
                console.log('üéØ –ì–ª–∞–≤–Ω—ã–π –∞—Ç–∞–∫—É—é—â–∏–π –Ω–∞–∂–∞–ª "–ü–∞—Å"');
            } else if (role === 'co-attacker') {
                newState.coAttackerPassed = true;
                newState.coAttackerPasPressed = true;
                newState.attackerBitoPressed = false; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –∞—Ç–∞–∫—É—é—â–µ–≥–æ
                console.log('üéØ –°–æ-–∞—Ç–∞–∫—É—é—â–∏–π –Ω–∞–∂–∞–ª "–ü–∞—Å"');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ —Ö–æ–¥
            checkTurnEnd(newState);
            
            return newState;
        });
    };

    const checkTurnEnd = (gameState: GameState) => {
        if (gameState.attackerPassed && gameState.coAttackerPassed) {
            console.log('üéØ –û–±–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞–∂–∞–ª–∏ "–ü–∞—Å" - —Ö–æ–¥ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è');
            endTurn();
        }
    };

    const endTurn = () => {
        console.log('üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞ - –∫–∞—Ä—Ç—ã –∏–¥—É—Ç –≤ —Å–±—Ä–æ—Å');
        
        updateGame((prev) => {
            const newState = { ...prev };
            
            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –≤ —Å–±—Ä–æ—Å
            const allCards = [
                ...(prev.slots?.filter(card => card !== null) || []),
                ...(prev.defenseSlots?.filter(card => card !== null) || [])
            ];
            
            newState.discardPile = [...(prev.discardPile || []), ...allCards];
            newState.slots = new Array(6).fill(null);
            newState.defenseSlots = new Array(6).fill(null);
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
            newState.attackPriority = 'attacker';
            newState.mainAttackerHasPlayed = false;
            newState.attackerPassed = false;
            newState.coAttackerPassed = false;
            newState.attackerBitoPressed = false;
            newState.coAttackerBitoPressed = false;
            newState.attackerPasPressed = false;
            newState.coAttackerPasPressed = false;
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–π
            newState.factionCounter = {};
            newState.activeFirstAttackFactions = [];
            newState.usedDefenseCardFactions = {};
            newState.displayActiveFactions = [];
            setDefenseCards([]);
            
            console.log('‚úÖ –•–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω, –∫–∞—Ä—Ç—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ —Å–±—Ä–æ—Å');
            
            return newState;
        });
        
        // –°–º–µ–Ω–∞ —Ä–æ–ª–µ–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞—â–∏—Ç—ã
        setTimeout(() => {
            rotateRolesAfterSuccessfulDefense();
        }, 100);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –¥–æ–±–æ—Ä–∞ –∫–∞—Ä—Ç
        setTimeout(() => {
            processDrawQueue();
        }, 200);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
        setTimeout(() => {
            checkGameEnd();
        }, 300);
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–µ–π
    const rotateRolesAfterSuccessfulDefense = () => {
        console.log('üéØ –°–º–µ–Ω–∞ —Ä–æ–ª–µ–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞—â–∏—Ç—ã (–∫–∞—Ä—Ç—ã –≤ —Å–±—Ä–æ—Å)');
        
        updateGame((prev) => {
            const newState = { ...prev };
            const playerIds = Object.keys(prev.players || {});
            const playerCount = playerIds.length;
            
            if (playerCount === 2) {
                // 2 –∏–≥—Ä–æ–∫–∞: —Ä–æ–ª–∏ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è
                console.log('üéØ 2 –∏–≥—Ä–æ–∫–∞ - —Ä–æ–ª–∏ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è');
            } else if (playerCount === 3) {
                // 3 –∏–≥—Ä–æ–∫–∞: —Ä–æ–ª–∏ —Å–¥–≤–∏–≥–∞—é—Ç—Å—è –Ω–∞ 1 –≤–ø–µ—Ä–µ–¥
                const currentRoles = { ...prev.playerRoles };
                const newRoles: Record<string, 'attacker' | 'co-attacker' | 'defender' | 'observer'> = {};
                
                playerIds.forEach((playerId) => {
                    const currentRole = currentRoles[playerId];
                    let newRole: 'attacker' | 'co-attacker' | 'defender' | 'observer';
                    
                    if (currentRole === 'attacker') {
                        newRole = 'defender';
                    } else if (currentRole === 'defender') {
                        newRole = 'co-attacker';
                    } else if (currentRole === 'co-attacker') {
                        newRole = 'attacker';
                    } else {
                        newRole = 'observer';
                    }
                    
                    newRoles[playerId] = newRole;
                });
                
                newState.playerRoles = newRoles;
                console.log('üéØ 3 –∏–≥—Ä–æ–∫–∞ - —Ä–æ–ª–∏ —Å–¥–≤–∏–Ω—É—Ç—ã –Ω–∞ 1 –≤–ø–µ—Ä–µ–¥');
            } else {
                // 4+ –∏–≥—Ä–æ–∫–æ–≤: —Ä–æ–ª–∏ —Å–¥–≤–∏–≥–∞—é—Ç—Å—è –Ω–∞ 1 –≤–ø–µ—Ä–µ–¥
                const currentRoles = { ...prev.playerRoles };
                const newRoles: Record<string, 'attacker' | 'co-attacker' | 'defender' | 'observer'> = {};
                
                playerIds.forEach((playerId) => {
                    const currentRole = currentRoles[playerId];
                    let newRole: 'attacker' | 'co-attacker' | 'defender' | 'observer';
                    
                    if (currentRole === 'attacker') {
                        newRole = 'defender';
                    } else if (currentRole === 'defender') {
                        newRole = 'co-attacker';
                    } else if (currentRole === 'co-attacker') {
                        newRole = 'observer';
                    } else {
                        // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–µ—Ç –∞—Ç–∞–∫—É—é—â–∏–º
                        const observerIndex = playerIds.indexOf(playerId);
                        const nextObserverIndex = (observerIndex + 1) % playerIds.length;
                        const nextObserverId = playerIds[nextObserverIndex];
                        
                        if (currentRoles[nextObserverId] === 'observer') {
                            newRole = 'attacker';
                        } else {
                            newRole = 'observer';
                        }
                    }
                    
                    newRoles[playerId] = newRole;
                });
                
                newState.playerRoles = newRoles;
                console.log('üéØ 4+ –∏–≥—Ä–æ–∫–æ–≤ - —Ä–æ–ª–∏ —Å–¥–≤–∏–Ω—É—Ç—ã –Ω–∞ 1 –≤–ø–µ—Ä–µ–¥');
            }
            
            return newState;
        });
    };

    // const rotateRolesAfterTakeCards = () => {
    //     console.log('üéØ –°–º–µ–Ω–∞ —Ä–æ–ª–µ–π –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç –∑–∞—â–∏—Ç–Ω–∏–∫–æ–º');
    //     
    //     updateGame((prev) => {
    //         const newState = { ...prev };
    //         const playerIds = Object.keys(prev.players || {});
    //         const playerCount = playerIds.length;
    //         
    //         if (playerCount === 2) {
    //             // 2 –∏–≥—Ä–æ–∫–∞: —Ä–æ–ª–∏ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è
    //             console.log('üéØ 2 –∏–≥—Ä–æ–∫–∞ - —Ä–æ–ª–∏ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è');
    //         } else if (playerCount === 3) {
    //             // 3 –∏–≥—Ä–æ–∫–∞: —Ä–æ–ª–∏ —Å–¥–≤–∏–≥–∞—é—Ç—Å—è –Ω–∞ 1 –Ω–∞–∑–∞–¥
    //             const currentRoles = { ...prev.playerRoles };
    //             const newRoles: Record<string, 'attacker' | 'co-attacker' | 'defender' | 'observer'> = {};
    //             
    //             playerIds.forEach((playerId) => {
    //                 const currentRole = currentRoles[playerId];
    //                 let newRole: 'attacker' | 'co-attacker' | 'defender' | 'observer';
    //                 
    //                 if (currentRole === 'attacker') {
    //                     newRole = 'co-attacker';
    //                 } else if (currentRole === 'co-attacker') {
    //                     newRole = 'defender';
    //                 } else if (currentRole === 'defender') {
    //                     newRole = 'attacker';
    //                 } else {
    //                     newRole = 'observer';
    //                 }
    //                 
    //                 newRoles[playerId] = newRole;
    //             });
    //             
    //             newState.playerRoles = newRoles;
    //             console.log('üéØ 3 –∏–≥—Ä–æ–∫–∞ - —Ä–æ–ª–∏ —Å–¥–≤–∏–Ω—É—Ç—ã –Ω–∞ 1 –Ω–∞–∑–∞–¥');
    //         } else {
    //             // 4+ –∏–≥—Ä–æ–∫–æ–≤: —Ä–æ–ª–∏ —Å–¥–≤–∏–≥–∞—é—Ç—Å—è –Ω–∞ 2 –≤–ø–µ—Ä–µ–¥
    //             const currentRoles = { ...prev.playerRoles };
    //             const newRoles: Record<string, 'attacker' | 'co-attacker' | 'defender' | 'observer'> = {};
    //             
    //             playerIds.forEach((playerId) => {
    //                 const currentRole = currentRoles[playerId];
    //                 let newRole: 'attacker' | 'co-attacker' | 'defender' | 'observer';
    //                 
    //                 if (currentRole === 'attacker') {
    //                     newRole = 'co-attacker';
    //                 } else if (currentRole === 'co-attacker') {
    //                     newRole = 'defender';
    //                 } else if (currentRole === 'defender') {
    //                     newRole = 'observer';
    //                 } else {
    //                     // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–µ—Ç –∞—Ç–∞–∫—É—é—â–∏–º
    //                     const observerIndex = playerIds.indexOf(playerId);
    //                     const nextObserverIndex = (observerIndex + 1) % playerIds.length;
    //                     const nextObserverId = playerIds[nextObserverIndex];
    //                     
    //                     if (currentRoles[nextObserverId] === 'observer') {
    //                         newRole = 'attacker';
    //                     } else {
    //                         newRole = 'observer';
    //                     }
    //                 }
    //                 
    //                 newRoles[playerId] = newRole;
    //             });
    //             
    //             newState.playerRoles = newRoles;
    //             console.log('üéØ 4+ –∏–≥—Ä–æ–∫–æ–≤ - —Ä–æ–ª–∏ —Å–¥–≤–∏–Ω—É—Ç—ã –Ω–∞ 2 –≤–ø–µ—Ä–µ–¥');
    //         }
    //         
    //         return newState;
    //     });
    // };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–æ—Ä–∞ –∫–∞—Ä—Ç
    const addToDrawQueue = (playerId: string, isDefender: boolean = false) => {
        console.log(`üéØ –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ ${playerId} –≤ –æ—á–µ—Ä–µ–¥—å –¥–æ–±–æ—Ä–∞ (–∑–∞—â–∏—Ç–Ω–∏–∫: ${isDefender})`);
        
        updateGame((prev) => {
            const newState = { ...prev };
            const currentQueue = [...(prev.drawQueue || [])];
            
            if (isDefender) {
                // –ó–∞—â–∏—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏
                currentQueue.push(playerId);
            } else {
                // –ê—Ç–∞–∫—É—é—â–∏–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏
                currentQueue.unshift(playerId);
            }
            
            newState.drawQueue = currentQueue;
            console.log(`üéØ –û—á–µ—Ä–µ–¥—å –¥–æ–±–æ—Ä–∞: ${currentQueue.join(', ')}`);
            
            return newState;
        });
    };

    const processDrawQueue = () => {
        console.log('üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –¥–æ–±–æ—Ä–∞ –∫–∞—Ä—Ç');
        
        updateGame((prev) => {
            const newState = { ...prev };
            const queue = [...(prev.drawQueue || [])];
            const deck = [...(prev.deck || [])];
            const hands = { ...prev.hands };
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            for (const playerId of queue) {
                const playerHand = hands[playerId] || [];
                
                // –î–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã –¥–æ 6, –µ—Å–ª–∏ –≤ –∫–æ–ª–æ–¥–µ –µ—Å—Ç—å –∫–∞—Ä—Ç—ã
                while (playerHand.length < 6 && deck.length > 0) {
                    const card = deck.shift();
                    if (card) {
                        playerHand.push(card);
                        console.log(`üéØ –ò–≥—Ä–æ–∫ ${playerId} –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç—É: ${card.name}`);
                    }
                }
                
                hands[playerId] = playerHand;
            }
            
            newState.deck = deck;
            newState.hands = hands;
            newState.drawQueue = []; // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            
            console.log(`‚úÖ –û—á–µ—Ä–µ–¥—å –¥–æ–±–æ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ: ${deck.length}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –¥–æ–±–æ—Ä–∞ –∫–∞—Ä—Ç
            if (deck.length === 0) {
                console.log('üéØ –ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã');
                setTimeout(() => {
                    checkGameEnd();
                }, 100);
            }
            
            return newState;
        });
    };

    const clearDrawQueue = () => {
        updateGame((prev) => ({
            ...prev,
            drawQueue: []
        }));
    };

    // –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ div –∑–∞—â–∏—Ç—ã —Å div –∞—Ç–∞–∫–∏
    const syncDefenseZoneSize = () => {
        const attackCardsCount = game.slots?.filter(slot => slot !== null).length || 0;
        const currentDefense = game.defenseSlots || [];
        if (attackCardsCount !== currentDefense.length) {
            updateGame((prev) => {
                const newDefenseSlots = new Array(attackCardsCount).fill(null).map((_, i) => prev.defenseSlots?.[i] || null);
                return { ...prev, defenseSlots: newDefenseSlots };
            });
        }
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    const checkGameEnd = () => {
        console.log('üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã');
        
        updateGame((prev) => {
            const newState = { ...prev };
            const playerIds = Object.keys(prev.players || {});
            const deckEmpty = (prev.deck?.length || 0) === 0;
            
            if (!deckEmpty) {
                console.log('üéØ –ö–æ–ª–æ–¥–∞ –Ω–µ –ø—É—Å—Ç–∞ - –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è');
                return newState;
            }
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å –∫–∞—Ä—Ç–∞–º–∏
            const playersWithCards = playerIds.filter(playerId => {
                const handSize = (prev.hands[playerId]?.length || 0);
                return handSize > 0;
            });
            
            console.log(`üéØ –ò–≥—Ä–æ–∫–∏ —Å –∫–∞—Ä—Ç–∞–º–∏: ${playersWithCards.length}`);
            
            if (playersWithCards.length === 1) {
                // –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ –æ—Å—Ç–∞–ª—Å—è —Å –∫–∞—Ä—Ç–∞–º–∏ - –æ–Ω –ø—Ä–æ–∏–≥—Ä–∞–ª
                const loserId = playersWithCards[0];
                const loserName = prev.players[loserId]?.name || loserId;
                
                console.log(`üéØ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ü—Ä–æ–∏–≥—Ä–∞–ª: ${loserName}`);
                
                newState.phase = "gameover";
                newState.winnerId = loserId;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                setTimeout(() => {
                    alert(`üéØ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n\n–ü—Ä–æ–∏–≥—Ä–∞–ª: ${loserName}\n\n–û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–±–µ–¥–∏–ª–∏!`);
                }, 500);
            } else if (playersWithCards.length === 0) {
                // –í—Å–µ –∏–≥—Ä–æ–∫–∏ –±–µ–∑ –∫–∞—Ä—Ç - –Ω–∏—á—å—è
                console.log('üéØ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ù–∏—á—å—è - –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –±–µ–∑ –∫–∞—Ä—Ç');
                
                newState.phase = "gameover";
                newState.winnerId = undefined;
                
                setTimeout(() => {
                    alert('üéØ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n\n–ù–∏—á—å—è - –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∫–∞—Ä—Ç!');
                }, 500);
            } else {
                console.log('üéØ –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è - –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ —Å –∫–∞—Ä—Ç–∞–º–∏');
            }
            
            return newState;
        });
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ—Ä–∞–∫—Ü–∏—è–º–∏
    const getFactionNames = (factionIds: number[]): string[] => {
        return factionIds.map(id => FACTIONS[id] || `Unknown ${id}`);
    };

    const hasCommonFactions = (cardFactions: number[], activeFactionIds: number[]): boolean => {
        return cardFactions.some(factionId => activeFactionIds.includes(factionId));
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –º–æ–∂–µ—Ç –ª–∏ –∫–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—Ä–∞–∫—Ü–∏—é
    const canDefenseCardUseFaction = (defenseCard: Card, factionId: number): boolean => {
        const usedFactions = game.usedDefenseCardFactions?.[defenseCard.id] || [];
        return !usedFactions.includes(factionId);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Ñ—Ä–∞–∫—Ü–∏–π
    const getFactionIntersection = (cardFactions: number[], activeFactionIds: number[]): number[] => {
        return cardFactions.filter(factionId => activeFactionIds.includes(factionId));
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—Ä–∞–∫—Ü–∏–π –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏
    const getFirstAttackCardFactions = (): number[] => {
        const attackCards = game.slots?.filter(card => card !== null) || [];
        if (attackCards.length === 0) return [];
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏
        return attackCards[0].factions;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—Ä–∞–∫—Ü–∏–π –æ—Ç –∫–∞—Ä—Ç –∑–∞—â–∏—Ç—ã –≤ –±—É—Ñ–µ—Ä
    const saveDefenseFactionsToBuffer = (currentFactionCounter: Record<number, number>) => {
        const newBuffer: Record<number, number> = {};
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ—Ä–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —è–≤–ª—è—é—Ç—Å—è —Ñ—Ä–∞–∫—Ü–∏—è–º–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏
        const firstAttackFactions = getFirstAttackCardFactions();
        const firstAttackSet = new Set(firstAttackFactions);
        
        Object.keys(currentFactionCounter).forEach(factionIdStr => {
            const factionId = parseInt(factionIdStr);
            if (!firstAttackSet.has(factionId) && currentFactionCounter[factionId] > 0) {
                newBuffer[factionId] = currentFactionCounter[factionId];
            }
        });
        
        // setDefenseFactionsBuffer(newBuffer);
        console.log(`üéØ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ñ—Ä–∞–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—ã –≤ –±—É—Ñ–µ—Ä:`, Object.keys(newBuffer).map(id => `${FACTIONS[parseInt(id)]}(${newBuffer[parseInt(id)]})`));
        return newBuffer;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—Ä–∞–∫—Ü–∏–π –æ—Ç –∫–∞—Ä—Ç –∑–∞—â–∏—Ç—ã –∏–∑ –±—É—Ñ–µ—Ä–∞
    // const restoreDefenseFactionsFromBuffer = (prev: Record<number, number>) => {
    //     const newCounter = { ...prev };
    //     // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞
    //     Object.keys(defenseFactionsBuffer).forEach(factionIdStr => {
    //         const factionId = parseInt(factionIdStr);
    //         newCounter[factionId] = defenseFactionsBuffer[factionId];
    //     });
    //     
    //     setFactionCounter(newCounter);
    //     console.log(`üéØ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ñ—Ä–∞–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—ã –∏–∑ –±—É—Ñ–µ—Ä–∞:`, Object.keys(defenseFactionsBuffer).map(id => `${FACTIONS[parseInt(id)]}(${defenseFactionsBuffer[parseInt(id)]})`));
    //     return newCounter;
    // };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ—Ä–∞–∫—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    const updateActiveFactionsFromAttackCard = (card: Card) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –¥–∏–≤ –∞—Ç–∞–∫–∏ (6 –∫–∞—Ä—Ç)
        const attackCardsCount = game.slots?.filter(slot => slot !== null).length || 0;
        if (attackCardsCount >= 6) {
            console.log(`üö´ –î–∏–≤ –∞—Ç–∞–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω (${attackCardsCount}/6), –±–ª–æ–∫–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–π`);
            return;
        }

        if (game.slots?.every(slot => slot === null)) {
            // –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –µ—ë —Ñ—Ä–∞–∫—Ü–∏–∏ –∫–∞–∫ –µ–¥–∏–Ω–∏—Ü—É
            updateGame(prev => ({
                ...prev,
                activeFirstAttackFactions: card.factions,
                factionCounter: card.factions.reduce((acc, factionId) => {
                    acc[factionId] = 1;
                    return acc;
                }, {} as Record<number, number>)
            }));
            console.log(`üéØ –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –∞—Ç–∞–∫–∏ - —Ñ—Ä–∞–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–∞–∫ –µ–¥–∏–Ω–∏—Ü–∞:`, getFactionNames(card.factions));
            return;
        }

        // –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞—Ä—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—ã –≤ –±—É—Ñ–µ—Ä
        saveDefenseFactionsToBuffer(factionCounter);

        // –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —Ñ—Ä–∞–∫—Ü–∏—è–º–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏
        const firstAttackFactions = getFirstAttackCardFactions();
        const intersection = getFactionIntersection(card.factions, firstAttackFactions);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è
        updateGame(prev => {
            const newCounter: Record<number, number> = {};
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ—Ä–∞–∫—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è (–Ω–µ –≤—Å–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã!)
            intersection.forEach(factionId => {
                if (prev.factionCounter?.[factionId] && prev.factionCounter[factionId] > 0) {
                    newCounter[factionId] = prev.factionCounter[factionId];
                }
            });
            
            return {
                ...prev,
                activeFirstAttackFactions: intersection,
                factionCounter: newCounter
            };
        });
        
        console.log(`üéØ –ö–∞—Ä—Ç–∞ –∞—Ç–∞–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –¥–∏–≤ –∞—Ç–∞–∫–∏ - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ñ—Ä–∞–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—ã`);
    };

    const updateActiveFactionsFromDefenseCard = (card: Card) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –¥–∏–≤ –∞—Ç–∞–∫–∏ (6 –∫–∞—Ä—Ç)
        const attackCardsCount = game.slots?.filter(slot => slot !== null).length || 0;
        if (attackCardsCount >= 6) {
            console.log(`üö´ –î–∏–≤ –∞—Ç–∞–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω (${attackCardsCount}/6), –±–ª–æ–∫–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã`);
            return;
        }

        // –í—Å–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏
        const factionNames = getFactionNames(card.factions);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
        updateGame(prev => {
            const newCounter = { ...prev.factionCounter };
            card.factions.forEach(factionId => {
                newCounter[factionId] = (newCounter[factionId] || 0) + 1;
            });
            return {
                ...prev,
                factionCounter: newCounter
            };
        });
        console.log(`üéØ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ—Ä–∞–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—ã:`, factionNames);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—Ä–∞–∫—Ü–∏–π
        updateActiveFactionsDisplay();
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∞—Ç–∞–∫—É—é—â–µ–π –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ –∑–∞—â–∏—Ç–Ω—É—é
    const attachAttackCardThroughDefense = (attackCard: Card, defenseCard: Card): boolean => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –¥–∏–≤ –∞—Ç–∞–∫–∏ (6 –∫–∞—Ä—Ç)
        const attackCardsCount = game.slots?.filter(slot => slot !== null).length || 0;
        if (attackCardsCount >= 6) {
            console.log(`üö´ –î–∏–≤ –∞—Ç–∞–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω (${attackCardsCount}/6), –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞—â–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É`);
            return false;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã (–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ)
        const availableDefenseFactions = defenseCard.factions.filter(factionId => 
            canDefenseCardUseFaction(defenseCard, factionId)
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–π —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ñ—Ä–∞–∫—Ü–∏—è–º–∏ –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã
        const intersection = getFactionIntersection(attackCard.factions, availableDefenseFactions);
        
        if (intersection.length === 0) {
            const attackFactionNames = getFactionNames(attackCard.factions);
            const availableDefenseFactionNames = getFactionNames(availableDefenseFactions);
            const usedDefenseFactionNames = getFactionNames(defenseCard.factions.filter(factionId => 
                !canDefenseCardUseFaction(defenseCard, factionId)
            ));
            
            if (usedDefenseFactionNames.length > 0) {
                alert(`‚ùå –§—Ä–∞–∫—Ü–∏–∏: ${usedDefenseFactionNames.join(', ')} —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã –¥–ª—è –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã ${defenseCard.name}. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏: ${availableDefenseFactionNames.join(', ')}. –ê—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞: ${attackFactionNames.join(', ')}`);
            } else {
                alert(`‚ùå –ù–µ—Ç –æ–±—â–∏—Ö —Ñ—Ä–∞–∫—Ü–∏–π! –ê—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞: ${attackFactionNames.join(', ')}, –ó–∞—â–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞: ${availableDefenseFactionNames.join(', ')}`);
            }
            return false;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—ã –≤ –±—É—Ñ–µ—Ä (–∫—Ä–æ–º–µ —Ñ—Ä–∞–∫—Ü–∏–π –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏)
        saveDefenseFactionsToBuffer(factionCounter);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏ (–æ–Ω–∏ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞—é—Ç—Å—è)
        const firstAttackFactions = getFirstAttackCardFactions();
        const firstAttackFactionNames = getFactionNames(firstAttackFactions);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ–π
        const intersectionNames = getFactionNames(intersection);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏ + –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
        const keepFactions = [...firstAttackFactions, ...intersection];
        
        updateGame(prev => {
            const newCounter: Record<number, number> = {};
            keepFactions.forEach(factionId => {
                if (prev.factionCounter?.[factionId] && prev.factionCounter[factionId] > 0) {
                    newCounter[factionId] = prev.factionCounter[factionId];
                }
            });
            
            return {
                ...prev,
                factionCounter: newCounter,
                activeFirstAttackFactions: firstAttackFactions,
                usedDefenseCardFactions: {
                    ...prev.usedDefenseCardFactions,
                    [defenseCard.id]: [...(prev.usedDefenseCardFactions?.[defenseCard.id] || []), ...intersection]
                }
            };
        });
        
        console.log(`üéØ –ê—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞—â–∏—Ç–Ω—É—é. –§—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏: ${firstAttackFactionNames.join(', ')}, –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: ${intersectionNames.join(', ')}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—Ä–∞–∫—Ü–∏–π
        updateActiveFactionsDisplay();
        return true;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—Ä–∞–∫—Ü–∏–π
    const updateActiveFactionsDisplay = () => {
        // –°–æ–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ —Å–æ –≤—Å–µ—Ö –∑–∞—â–∏—Ç–Ω—ã—Ö –∫–∞—Ä—Ç
        const allAvailableDefenseFactions: number[] = [];
        (game.defenseSlots || []).forEach(defenseCard => {
            if (defenseCard) {
                const availableDefenseFactions = defenseCard.factions.filter(factionId => 
                    canDefenseCardUseFaction(defenseCard, factionId)
                );
                allAvailableDefenseFactions.push(...availableDefenseFactions);
            }
        });

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ñ—Ä–∞–∫—Ü–∏—è–º–∏ –∑–∞—â–∏—Ç—ã
        [...new Set([
            ...(game.activeFirstAttackFactions || []),
            ...allAvailableDefenseFactions
        ])];

        // –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const displayCounter: Record<number, number> = {};
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—Ç –∫–∞—Ä—Ç –∞—Ç–∞–∫–∏ (—Ñ—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã)
        (game.activeFirstAttackFactions || []).forEach(factionId => {
            displayCounter[factionId] = (displayCounter[factionId] || 0) + 1;
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—Ç –∫–∞—Ä—Ç –∑–∞—â–∏—Ç—ã
        allAvailableDefenseFactions.forEach(factionId => {
            displayCounter[factionId] = (displayCounter[factionId] || 0) + 1;
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏
        const newActiveFactions = Object.entries(displayCounter)
            .filter(([_, count]) => count > 0)
            .map(([factionId, count]) => `${getFactionNames([Number(factionId)])[0]} (${count})`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        updateGame(prev => ({
            ...prev,
            displayActiveFactions: newActiveFactions
        }));
    };


    const validateAttackCard = (card: Card): { isValid: boolean; reason?: string } => {
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –∞—Ç–∞–∫–∏, —Ä–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±—É—é –∫–∞—Ä—Ç—É
        if (game.slots?.every(slot => slot === null)) {
            return { isValid: true };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—â–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ñ—Ä–∞–∫—Ü–∏—è–º–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã
        if (game.activeFirstAttackFactions && game.activeFirstAttackFactions.length > 0) {
            const hasCommon = hasCommonFactions(card.factions, game.activeFirstAttackFactions);
            if (!hasCommon) {
                return { 
                    isValid: false, 
                    reason: `–ö–∞—Ä—Ç–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –æ–±—â–∏–µ —Ñ—Ä–∞–∫—Ü–∏–∏ —Å –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–æ–π –∞—Ç–∞–∫–∏: ${getFactionNames(game.activeFirstAttackFactions).join(', ')}` 
                };
            }
        }

        return { isValid: true };
    };

    const validateDefenseCard = (defenseCard: Card, attackCard: Card): boolean => {
        return defenseCard.power > attackCard.power;
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è drag&drop
    const handleDragStart = (event: DragStartEvent) => {
        const { active } = event;
        const cardData = active.data.current as { card: Card; index: number; source: string };
        
        if (cardData) {
            setActiveCard(cardData);
            console.log(`üéØ Drag start: ${cardData.card.name} from ${cardData.source}`);
            console.log(`üéØ Current gameMode: ${gameMode}`);
            console.log(`üéØ Player role: ${getCurrentPlayerRole()}`);
            console.log(`üéØ Can player attack: ${canPlayerAttack()}`);
        }
    };

    const handleDragEnd = (event: DragEndEvent) => {
        const { active, over } = event;
        console.log('üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ:', { activeId: active.id, overId: over?.id });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ - –Ω–∞–±–ª—é–¥–∞—é—â–∏–µ –Ω–µ –º–æ–≥—É—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–æ —Å—Ç–æ–ª–æ–º
        if (getCurrentPlayerRole() === 'observer') {
            console.log('‚ùå –ù–∞–±–ª—é–¥–∞—é—â–∏–µ –∏–≥—Ä–æ–∫–∏ –Ω–µ –º–æ–≥—É—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–æ —Å—Ç–æ–ª–æ–º');
            setActiveCard(null);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞—Ç–∞–∫–∏ –¥–ª—è –∞—Ç–∞–∫—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        if (gameMode === 'attack' && !canPlayerAttack()) {
            console.log('‚ùå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞—Ç–∞–∫–∏ –Ω–µ —É –≤–∞—Å');
            alert('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∞—Ç–∞–∫–∏ –Ω–µ —É –≤–∞—Å');
            setActiveCard(null);
            return;
        }

        setActiveCard(null);
        setHoveredAttackCard(null);
        setHoveredDefenseCard(null);

        if (!over) {
            console.log('‚ùå –ù–µ—Ç —Ü–µ–ª–∏ –¥–ª—è drop');
            return;
        }

        const cardData = active.data.current as { card: Card; index: number; source: string };
        if (!cardData) {
            console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã');
            return;
        }

        const targetZone = over.id as string;
        console.log('üéØ –¶–µ–ª–µ–≤–∞—è –∑–æ–Ω–∞:', targetZone);

        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ —Ä—É–∫–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –∑–∞—â–∏—Ç—ã
        if (cardData.source === 'hand' && targetZone.startsWith('defense-card-')) {
            const attackIndex = parseInt(targetZone.replace('defense-card-', ''));
            console.log('üéØ –ö–∞—Ä—Ç–∞ –æ—Ç–ø—É—â–µ–Ω–∞ –Ω–∞–¥ –∫–∞—Ä—Ç–æ–π –∑–∞—â–∏—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –¥–∏–≤ –∞—Ç–∞–∫–∏');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ä—Ç—É –∑–∞—â–∏—Ç—ã
            let defenseCard: Card | null = null;
            if (hoveredDefenseCard !== null && game.defenseSlots?.[hoveredDefenseCard]) {
                defenseCard = game.defenseSlots[hoveredDefenseCard];
            } else if (game.defenseSlots?.[attackIndex]) {
                defenseCard = game.defenseSlots[attackIndex];
            }
            
            if (!defenseCard) {
                console.log('‚ùå –ö–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –º–µ—Ö–∞–Ω–∏–∫—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞—â–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É
            const success = attachAttackCardThroughDefense(cardData.card, defenseCard);
            if (!success) {
                setActiveCard(null);
                setHoveredDefenseCard(null);
                return;
            }
            
            // –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
            const freeSlotIndex = game.slots?.findIndex(slot => slot === null) ?? -1;
            
            if (freeSlotIndex >= 0) {
                console.log('üéØ –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ —Å–ª–æ—Ç', freeSlotIndex);
                
                updateGame((prev) => {
            const myCards = [...(prev.hands[myId] || [])];
                    myCards.splice(cardData.index, 1);
                    
                    const slots = [...(prev.slots || [])];
                    slots[freeSlotIndex] = cardData.card;
                    
                    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –≥–ª–∞–≤–Ω—ã–π –∞—Ç–∞–∫—É—é—â–∏–π –ø–æ–¥–∫–∏–Ω—É–ª –∫–∞—Ä—Ç—É
                    let newState = {
                ...prev,
                hands: { ...prev.hands, [myId]: myCards },
                slots,
            };

                    if (getCurrentPlayerRole() === 'attacker') {
                        newState.mainAttackerHasPlayed = true;
                        console.log('üéØ –ì–ª–∞–≤–Ω—ã–π –∞—Ç–∞–∫—É—é—â–∏–π –ø–æ–¥–∫–∏–Ω—É–ª –∫–∞—Ä—Ç—É');
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
                    updateActiveFactionsFromAttackCard(cardData.card);

                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å –¥–æ–±–æ—Ä–∞
                    addToDrawQueue(myId, false);

                    return tryDeclareWinner(newState);
                });
            } else {
                console.log('‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤');
                alert('‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —Å—Ç–æ–ª–µ!');
            }
            return;
        }

        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ —Ä—É–∫–∏ –Ω–∞ —Å—Ç–æ–ª
        if (cardData.source === 'hand' && targetZone === 'table') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º: –≤ —Ä–µ–∂–∏–º–µ –∑–∞—â–∏—Ç—ã –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª –∞—Ç–∞–∫–∏
            if (gameMode === 'defense') {
                // –í —Ä–µ–∂–∏–º–µ –∑–∞—â–∏—Ç—ã –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–±–∏—Ç—å –∫–∞—Ä—Ç—É
                const attackCards = game.slots?.map((slot, idx) => ({ slot, index: idx })).filter(({ slot }) => slot !== null) || [];
                
                if (attackCards.length > 0) {
                    const targetIndex = hoveredAttackCard !== null ? hoveredAttackCard : attackCards[0].index;
                    console.log('üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –∑–∞—â–∏—Ç—ã:', targetIndex);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∑–∞—â–∏—Ç—ã –Ω–∞–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π –∞—Ç–∞–∫–∏ (–≤ –æ–¥–Ω–æ–º –∞—Ç–æ–º–∞—Ä–Ω–æ–º –∞–ø–¥–µ–π—Ç–µ –≤–Ω—É—Ç—Ä–∏ addDefenseCard)
                    addDefenseCard(targetIndex, cardData.card, cardData.index);
                } else {
                    alert('üõ°Ô∏è –ù–µ—Ç –∫–∞—Ä—Ç –∞—Ç–∞–∫–∏ –¥–ª—è –æ—Ç–±–∏–≤–∞–Ω–∏—è!');
                }
                return;
            }
            
            // –í —Ä–µ–∂–∏–º–µ –∞—Ç–∞–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ–ª
            const validation = validateAttackCard(cardData.card);
            if (!validation.isValid) {
                console.log('‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é:', validation.reason);
                alert(validation.reason);
                return;
            }

            // –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
            const freeSlotIndex = game.slots?.findIndex(slot => slot === null) ?? -1;
            
            if (freeSlotIndex >= 0) {
                console.log('üéØ –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ —Å–ª–æ—Ç', freeSlotIndex);
                
        updateGame((prev) => {
            const myCards = [...(prev.hands[myId] || [])];
                    myCards.splice(cardData.index, 1);
                    
                    const slots = [...(prev.slots || [])];
                    slots[freeSlotIndex] = cardData.card;
                    
                    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –≥–ª–∞–≤–Ω—ã–π –∞—Ç–∞–∫—É—é—â–∏–π –ø–æ–¥–∫–∏–Ω—É–ª –∫–∞—Ä—Ç—É
                    let newState = {
                ...prev,
                hands: { ...prev.hands, [myId]: myCards },
                slots,
            };

                    if (getCurrentPlayerRole() === 'attacker') {
                        newState.mainAttackerHasPlayed = true;
                        console.log('üéØ –ì–ª–∞–≤–Ω—ã–π –∞—Ç–∞–∫—É—é—â–∏–π –ø–æ–¥–∫–∏–Ω—É–ª –∫–∞—Ä—Ç—É');
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
                    updateActiveFactionsFromAttackCard(cardData.card);

                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å –¥–æ–±–æ—Ä–∞
                    addToDrawQueue(myId, false);

                    return tryDeclareWinner(newState);
                });
                
                console.log('‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
            } else {
                console.log('‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤');
                alert('üÉè –°—Ç–æ–ª –ø–æ–ª–æ–Ω! –ú–∞–∫—Å–∏–º—É–º 6 –∫–∞—Ä—Ç.');
            }
        }
    };

    const addDefenseCard = (attackCardIndex: number, defenseCard: Card, handIndex?: number): boolean => {
        const attackCard = game.slots?.[attackCardIndex];
        if (!attackCard) {
            console.log('‚ùå –ö–∞—Ä—Ç–∞ –∞—Ç–∞–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return false;
        }

        if (!validateDefenseCard(defenseCard, attackCard)) {
            console.log('‚ùå –ö–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±–∞—è');
            alert(`‚ùå –ö–∞—Ä—Ç–∞ "${defenseCard.name}" (—Å–∏–ª–∞: ${defenseCard.power}) –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–±–∏—Ç—å "${attackCard.name}" (—Å–∏–ª–∞: ${attackCard.power})`);
            return false;
        }

        // –ê—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Å—Ç–∞–≤–∏–º –∫–∞—Ä—Ç—É –≤ defenseSlots –∏ —É–±–∏—Ä–∞–µ–º –µ—ë –∏–∑ —Ä—É–∫–∏
        updateGame((prev) => {
            const newState = { ...prev };
            const defenseSlots = [...(prev.defenseSlots || [])];
            while (defenseSlots.length <= attackCardIndex) {
                defenseSlots.push(null);
            }
            // –ó–∞–ø—Ä–µ—â–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç
            if (defenseSlots[attackCardIndex] !== null) {
                console.log(`‚ùå –°–ª–æ—Ç –∑–∞—â–∏—Ç—ã ${attackCardIndex} —É–∂–µ –∑–∞–Ω—è—Ç`);
                return prev;
            }
            defenseSlots[attackCardIndex] = defenseCard;

            // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            const myCards = [...(prev.hands[myId] || [])];
            if (handIndex !== undefined && handIndex >= 0 && handIndex < myCards.length && myCards[handIndex]?.id === defenseCard.id) {
                myCards.splice(handIndex, 1);
            } else {
                const idx = myCards.findIndex(c => c?.id === defenseCard.id);
                if (idx !== -1) myCards.splice(idx, 1);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –∏ –æ—á–µ—Ä–µ–¥—å –¥–æ–±–æ—Ä–∞ –¥–ª—è –∑–∞—â–∏—Ç–Ω–∏–∫–∞
            updateActiveFactionsFromDefenseCard(defenseCard);
            addToDrawQueue(myId, true);

            newState.hands = { ...prev.hands, [myId]: myCards };
            newState.defenseSlots = defenseSlots;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º usedDefenseCardFactions –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã
            if (!newState.usedDefenseCardFactions) {
                newState.usedDefenseCardFactions = {};
            }
            if (!newState.usedDefenseCardFactions[defenseCard.id]) {
                newState.usedDefenseCardFactions[defenseCard.id] = [];
            }
            
            return newState;
        });

        console.log(`‚úÖ –ö–∞—Ä—Ç–∞ "${defenseCard.name}" —É—Å–ø–µ—à–Ω–æ –æ—Ç–±–∏–ª–∞ "${attackCard.name}"`);
        return true;
    };

    const tryDeclareWinner = (draft: GameState): GameState => {
        // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–º –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã
        // –û–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ checkGameEnd() –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏–π –∫–æ–Ω—Ü–∞ —Ö–æ–¥–∞
        console.log('üéØ tryDeclareWinner –≤—ã–∑–≤–∞–Ω–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
        return draft;
    };


    const onRestartToLobby = () => {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        resetGameState();
        
        updateGame(() => ({
            phase: "lobby",
            hostId: myId,
            players: Object.fromEntries(
                Object.entries(game.players).map(([id, player]) => [id, player])
            ),
            hands: {},
            slots: [],
            defenseSlots: [],
            playerCountAtStart: undefined,
            winnerId: undefined,
            startedAt: undefined,
            
            // Role system
            playerRoles: {},
            attackPriority: 'attacker',
            mainAttackerHasPlayed: false,
            attackerPassed: false,
            coAttackerPassed: false,
            attackerBitoPressed: false,
            coAttackerBitoPressed: false,
            attackerPasPressed: false,
            coAttackerPasPressed: false,
            
            // Draw queue
            drawQueue: [],
            
            // Game initialization
            gameInitialized: false,
            firstPlayerInfo: undefined,
            
            // Card draw system
            deck: [],
            discardPile: [],
            maxHandSize: 6,
            cardsDrawnThisTurn: {},
            canDrawCards: false,
            
            // Faction system
            availableTargets: [],
            factionBonuses: {},
            targetSelectionMode: false,
            factionEffects: {},
            activeFactions: [],
            
            // Faction management
            factionCounter: {},
            activeFirstAttackFactions: [],
            usedDefenseCardFactions: {},
            displayActiveFactions: [],
            
            // Card power system
            minCardPower: 50,
            maxCardPower: 100,
            canDefendWithEqualPower: true,
            
            // Turn control system
            turnActions: {
                canEndTurn: false,
                canPass: false,
                canTakeCards: false,
                canAttack: false,
                canDefend: false,
            },
            turnHistory: [],
        }));
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ —Ä–æ–ª–∏
    const getRoleEmoji = (role: 'attacker' | 'co-attacker' | 'defender' | 'observer'): string => {
        switch (role) {
            case 'attacker': return '‚öîÔ∏è';
            case 'co-attacker': return 'üó°Ô∏è';
            case 'defender': return 'üõ°Ô∏è';
            case 'observer': return 'üëÅÔ∏è';
            default: return '‚ùì';
        }
    };

    return (
        <DndContext onDragStart={handleDragStart} onDragEnd={handleDragEnd}>
        <div style={{ minHeight: "100vh", display: "flex", flexDirection: "column", background: "#0b1020", color: "#fff" }}>
            {/* Header with players and game info */}
            <div style={{ padding: 8, background: "#101826", position: "sticky", top: 0 }}>
                <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: 6 }}>
                    <div style={{ display: "flex", alignItems: "center", gap: 12, flexWrap: "wrap" }}>
                        <h2 style={{ margin: 0, fontSize: 16, fontWeight: 600 }}>üéÆ –ò–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞</h2>
                        <button
                            onClick={onRestartToLobby}
                            className="game-button game-button-primary"
                            style={{
                                ...gameButtonStyle,
                                backgroundColor: '#ef4444',
                                border: "1px solid #ef4444",
                            }}
                        >
                            –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
                        </button>
                        
                        {/* –ö–Ω–æ–ø–∫–∞ —Å–µ–Ω—Å–æ—Ä–∞ */}
                        <button
                            onClick={() => setShowSensorCircle(!showSensorCircle)}
                            className="game-button"
                            style={{
                                ...gameButtonStyle,
                                backgroundColor: showSensorCircle ? '#059669' : '#6b7280',
                                border: `1px solid ${showSensorCircle ? '#059669' : '#6b7280'}`,
                            }}
                        >
                            {showSensorCircle ? "–°–∫—Ä—ã—Ç—å —Å–µ–Ω—Å–æ—Ä" : "–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–Ω—Å–æ—Ä"}
                        </button>
                        
                        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π */}
                        {game.gameInitialized && (
                            <>
                                {/* –†–µ–∂–∏–º—ã –∏–≥—Ä—ã */}
                                <button
                                    onClick={() => setGameMode('attack')}
                                    className={`game-button ${gameMode === 'attack' ? 'game-button-attack' : 'game-button-secondary'}`}
                                    style={{
                                        ...gameButtonStyle,
                                        backgroundColor: gameMode === 'attack' ? '#dc2626' : '#374151',
                                        fontWeight: gameMode === 'attack' ? "bold" : "normal"
                                    }}
                                >
                                    ‚öîÔ∏è –ê—Ç–∞–∫–∞
                                </button>
                                <button
                                    onClick={() => setGameMode('defense')}
                                    className={`game-button ${gameMode === 'defense' ? 'game-button-defense' : 'game-button-secondary'}`}
                                    style={{
                                        ...gameButtonStyle,
                                        backgroundColor: gameMode === 'defense' ? '#1d4ed8' : '#374151',
                                        fontWeight: gameMode === 'defense' ? "bold" : "normal"
                                    }}
                                >
                                    üõ°Ô∏è –ó–∞—â–∏—Ç–∞
                                </button>
                                
                                {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞—Ç–∞–∫—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ */}
                                {getCurrentPlayerRole() === 'attacker' && (
                                    <>
                                        <button
                                            onClick={handleBito}
                                            disabled={!game.mainAttackerHasPlayed || hasUnbeatenCards() || game.attackerBitoPressed || game.attackerPassed}
                                            className={`game-button ${(!game.mainAttackerHasPlayed || hasUnbeatenCards() || game.attackerBitoPressed || game.attackerPassed) ? 'game-button-secondary' : 'game-button-bito'}`}
                                            style={{
                                                ...gameButtonStyle,
                                                backgroundColor: (!game.mainAttackerHasPlayed || hasUnbeatenCards() || game.attackerBitoPressed || game.attackerPassed) ? '#374151' : '#f59e0b',
                                                fontWeight: "bold"
                                            }}
                                        >
                                            üö´ –ë–∏—Ç–æ
                                        </button>
                                        <button
                                            onClick={handlePas}
                                            disabled={!game.mainAttackerHasPlayed || hasUnbeatenCards() || game.attackerPasPressed}
                                            className={`game-button ${(!game.mainAttackerHasPlayed || hasUnbeatenCards() || game.attackerPasPressed) ? 'game-button-secondary' : 'game-button-pas'}`}
                                            style={{
                                                ...gameButtonStyle,
                                                backgroundColor: (!game.mainAttackerHasPlayed || hasUnbeatenCards() || game.attackerPasPressed) ? '#374151' : '#ef4444',
                                                fontWeight: "bold"
                                            }}
                                        >
                                            üõë –ü–∞—Å
                                        </button>
                                    </>
                                )}
                                
                                {getCurrentPlayerRole() === 'co-attacker' && (
                                    <>
                                        <button
                                            onClick={handleBito}
                                            disabled={!game.mainAttackerHasPlayed || hasUnbeatenCards() || game.coAttackerBitoPressed || game.coAttackerPassed}
                                            className={`game-button ${(!game.mainAttackerHasPlayed || hasUnbeatenCards() || game.coAttackerBitoPressed || game.coAttackerPassed) ? 'game-button-secondary' : 'game-button-bito'}`}
                                            style={{
                                                ...gameButtonStyle,
                                                backgroundColor: (!game.mainAttackerHasPlayed || hasUnbeatenCards() || game.coAttackerBitoPressed || game.coAttackerPassed) ? '#374151' : '#f59e0b',
                                                fontWeight: "bold"
                                            }}
                                        >
                                            üö´ –ë–∏—Ç–æ
                                        </button>
                                        <button
                                            onClick={handlePas}
                                            disabled={!game.mainAttackerHasPlayed || hasUnbeatenCards() || game.coAttackerPasPressed}
                                            className={`game-button ${(!game.mainAttackerHasPlayed || hasUnbeatenCards() || game.coAttackerPasPressed) ? 'game-button-secondary' : 'game-button-pas'}`}
                                            style={{
                                                ...gameButtonStyle,
                                                backgroundColor: (!game.mainAttackerHasPlayed || hasUnbeatenCards() || game.coAttackerPasPressed) ? '#374151' : '#ef4444',
                                                fontWeight: "bold"
                                            }}
                                        >
                                            üõë –ü–∞—Å
                                        </button>
                                    </>
                                )}
                                
                                {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞—â–∏—Ç–Ω–∏–∫–∞ */}
                                {getCurrentPlayerRole() === 'defender' && (
                                    <button
                                        onClick={() => {
                                            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–∑—è—Ç–∏–µ –∫–∞—Ä—Ç –∑–∞—â–∏—Ç–Ω–∏–∫–æ–º
                                            alert('üõ°Ô∏è –§—É–Ω–∫—Ü–∏—è "–í–∑—è—Ç—å –∫–∞—Ä—Ç—ã" –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ');
                                        }}
                                        className="game-button game-button-take"
                                        style={{
                                            ...gameButtonStyle,
                                            backgroundColor: '#10b981',
                                            fontWeight: "bold"
                                        }}
                                    >
                                        üõ°Ô∏è –í–∑—è—Ç—å –∫–∞—Ä—Ç—ã
                                    </button>
                                )}
                            </>
                        )}
                    </div>
                    <div style={{ fontSize: 10, opacity: 0.7 }}>
                        –ö–∞—Ä—Ç –≤ —Ä—É–∫–µ: {myHand.length} | –°–ª–æ—Ç–æ–≤ –Ω–∞ —Å—Ç–æ–ª–µ: {game.slots?.filter(s => s !== null).length || 0} | –ö–æ–ª–æ–¥–∞: {game.deck?.length || 0} | –°–±—Ä–æ—Å: {game.discardPile?.length || 0}
                    </div>
                    <div style={{ fontSize: 9, opacity: 0.5, marginTop: 2 }}>
                        üñ±Ô∏è –°–µ–Ω—Å–æ—Ä: {gameMode === 'attack' ? '–∏—â–µ—Ç –∫–∞—Ä—Ç—ã (–∑–∞—â–∏—Ç–∞ > –∞—Ç–∞–∫–∞)' : '–∏—â–µ—Ç –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏'} | –†–∞–¥–∏—É—Å: 80px | –ö—É—Ä—Å–æ—Ä: {mousePosition ? `${mousePosition.x}, ${mousePosition.y}` : '–Ω–µ—Ç'} | –ê–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞: {activeCard ? `${activeCard.card.name} (${activeCard.source})` : '–Ω–µ—Ç'} | –û—Ç–ª–∞–¥–∫–∞: {showSensorCircle ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}
                    </div>
                </div>
                
                {/* Players with roles */}
                <div style={{ display: "flex", gap: 6, flexWrap: "wrap", marginBottom: 4 }}>
                    {playerIds.map((pid) => {
                        const playerRole = game.playerRoles?.[pid];
                        return (
                            <div key={pid} style={{ 
                                padding: "4px 8px !important", 
                                borderRadius: 999, 
                                background: pid === myId ? "#065f46" : "#1f2937",
                                border: pid === myId ? "1px solid #10b981" : "1px solid #374151",
                                fontSize: 11
                            }}>
                            {game.players[pid]?.name || pid}
                            {pid === myId ? " ‚Ä¢ –≤—ã" : ""}
                            {pid === game.hostId ? " üëë" : ""}
                                {playerRole && <span style={{ marginLeft: 4 }}>{getRoleEmoji(playerRole)}</span>}
                        </div>
                        );
                    })}
                </div>
                
                {/* Game status */}
                {game.gameInitialized && (
                    <div style={{ marginTop: 4, fontSize: 10, opacity: 0.7 }}>
                        <div>üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {game.attackPriority === 'attacker' ? '‚öîÔ∏è –ì–ª–∞–≤–Ω—ã–π' : 'üó°Ô∏è –°–æ-–∞—Ç–∞–∫—É—é—â–∏–π'}</div>
                        <div>üé≤ –ò–≥—Ä–∞–ª: {game.mainAttackerHasPlayed ? '‚úÖ' : '‚ùå'}</div>
                        {game.firstPlayerInfo && (
                            <div>üèÜ –ü–µ—Ä–≤—ã–π: {game.firstPlayerInfo.playerName}</div>
                        )}
                        {activeFactions.length > 0 && (
                            <div>‚öîÔ∏è –§—Ä–∞–∫—Ü–∏–∏: {activeFactions.join(', ')}</div>
                        )}
                        {game.drawQueue && game.drawQueue.length > 0 && (
                            <div>üéØ –î–æ–±–æ—Ä: {game.drawQueue.length}</div>
                        )}
                    </div>
                )}
            </div>


            {/* Center slots */}
            <div style={{ flex: 1, display: "flex", flexDirection: "column", alignItems: "center", justifyContent: "center", padding: "20px" }}>
                    {/* –ò–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª */}
                    <div style={{ 
                        padding: "20px", 
                        background: "#1f2937", 
                        borderRadius: "12px",
                        border: "2px solid #4B5563",
                        marginBottom: "12px",
                                display: "flex",
                                flexDirection: "column",
                        alignItems: "center"
                    }}>
                        <div style={{ fontSize: "16px", marginBottom: "16px", color: "#FFD700" }}>
                            üéÆ –ò–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª:
                        </div>
                        
                        {/* –ê—Ç–∞–∫—É—é—â–∏–µ –∫–∞—Ä—Ç—ã */}
                        <div style={{ marginBottom: "16px" }}>
                            <div style={{ fontSize: "14px", marginBottom: "8px", color: "#FFD700", textAlign: "center" }}>
                                ‚öîÔ∏è –ê—Ç–∞–∫—É—é—â–∏–µ –∫–∞—Ä—Ç—ã:
                            </div>
                            <DropZone
                                id="table"
                                cards={game.slots || []}
                                minVisibleCards={1}
                                gameMode={gameMode}
                                onCardClick={(index) => {
                                    console.log('Clicked table card:', index);
                                }}
                                onCardHover={handleAttackCardHover}
                                onCardLeave={handleAttackCardLeave}
                                highlightedCardIndex={hoveredAttackCard}
                                onMousePositionUpdate={() => {}}
                                activeCard={activeCard}
                                onDropZoneActivate={handleDropZoneActivate}
                                onDropZoneDeactivate={handleDropZoneDeactivate}
                                activeDropZone={activeDropZone}
                            />
                                    </div>

                        {/* –ó–∞—â–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã */}
                        {(game.slots || []).filter(slot => slot !== null).length > 0 && (
                            <div>
                                <div style={{ fontSize: "14px", marginBottom: "8px", color: "#FFD700", textAlign: "center" }}>
                                    üõ°Ô∏è –ó–∞—â–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã:
                                    </div>
                                <DefenseZone
                                    attackCards={game.slots || []}
                                    defenseCards={game.defenseSlots || []}
                                    onCardClick={(attackIndex) => {
                                        console.log('Clicked defense card:', attackIndex);
                                    }}
                                    onCardHover={handleDefenseCardHover}
                                    onCardLeave={handleDefenseCardLeave}
                                    highlightedCardIndex={gameMode === 'defense' ? hoveredAttackCard : null}
                                    gameMode={gameMode}
                                    invalidDefenseCard={null}
                                    onDefenseCardHover={handleDefenseCardSlotHover}
                                    onDefenseCardLeave={handleDefenseCardSlotLeave}
                                    playerRole={getCurrentPlayerRole()}
                                    highlightedDefenseCardIndex={hoveredDefenseCard}
                                />
                                    </div>
                            )}
                </div>
            </div>

            {/* My hand */}
            <div style={{ padding: 16 }}>
                <div style={{ fontSize: "16px", marginBottom: "12px", color: "#FFD700", textAlign: "center" }}>
                    üÉè –ú–æ–∏ –∫–∞—Ä—Ç—ã:
                </div>
                <DropZone
                    id="my-hand"
                    cards={myHand}
                    maxVisibleCards={6}
                    gameMode={gameMode}
                />
            </div>

            {/* Game initialization modal */}
            {showGameInitialization && (
                <div style={{
                    position: "fixed",
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    background: "rgba(0, 0, 0, 0.8)",
                            display: "flex",
                            alignItems: "center",
                            justifyContent: "center",
                    zIndex: 1000
                }}>
                    <div style={{
                        background: "#1f2937",
                        padding: 24,
                        borderRadius: 12,
                        textAlign: "center",
                        maxWidth: 400,
                        border: "2px solid #10b981"
                    }}>
                        <h2 style={{ fontSize: 20, fontWeight: 700, marginBottom: 16, color: "#10b981" }}>
                            üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!
                        </h2>
                        
                        {game.firstPlayerInfo && (
                            <div style={{ marginBottom: 16 }}>
                                <div style={{ fontSize: 16, marginBottom: 8, color: "#FFD700" }}>
                                    –ü–µ—Ä–≤—ã–π —Ö–æ–¥ –¥–µ–ª–∞–µ—Ç:
                                </div>
                                <div style={{ fontSize: 18, fontWeight: 600, color: "#fff", marginBottom: 4 }}>
                                    {game.firstPlayerInfo.playerName}
                                </div>
                                <div style={{ fontSize: 14, color: "#10b981", marginBottom: 8 }}>
                                    –ö–∞—Ä—Ç–∞: {game.firstPlayerInfo.cardName} (—Å–∏–ª–∞: {game.firstPlayerInfo.power})
                                </div>
                                <div style={{ fontSize: 12, color: "#9ca3af", marginBottom: 8 }}>
                                    –†–æ–ª—å: {getRoleEmoji(game.playerRoles?.[game.firstPlayerInfo.playerId] || 'observer')} {
                                        game.playerRoles?.[game.firstPlayerInfo.playerId] === 'attacker' ? '–ì–ª–∞–≤–Ω—ã–π –∞—Ç–∞–∫—É—é—â–∏–π' :
                                        game.playerRoles?.[game.firstPlayerInfo.playerId] === 'co-attacker' ? '–°–æ-–∞—Ç–∞–∫—É—é—â–∏–π' :
                                        game.playerRoles?.[game.firstPlayerInfo.playerId] === 'defender' ? '–ó–∞—â–∏—Ç–Ω–∏–∫' :
                                        '–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å'
                                    }
                                </div>
                            </div>
                        )}
                        
                        <div style={{ fontSize: 16, marginBottom: 16 }}>
                            <div style={{ marginBottom: 8 }}>
                                <strong>–í–∞—à–∞ —Ä–æ–ª—å:</strong> {getRoleEmoji(getCurrentPlayerRole() || 'observer')} {
                                    getCurrentPlayerRole() === 'attacker' ? '–ì–ª–∞–≤–Ω—ã–π –∞—Ç–∞–∫—É—é—â–∏–π' :
                                    getCurrentPlayerRole() === 'co-attacker' ? '–°–æ-–∞—Ç–∞–∫—É—é—â–∏–π' :
                                    getCurrentPlayerRole() === 'defender' ? '–ó–∞—â–∏—Ç–Ω–∏–∫' :
                                    '–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å'
                                }
                            </div>
                        </div>
                        
                        <div style={{ fontSize: 12, color: "#9ca3af", marginBottom: 16 }}>
                            –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
                        </div>
                    <button
                            onClick={() => setShowGameInitialization(false)}
                        style={{
                                padding: "8px 16px",
                                background: "#10b981",
                            color: "#fff",
                                border: "none",
                                borderRadius: 6,
                            cursor: "pointer",
                                fontSize: 14,
                                fontWeight: 500
                            }}
                        >
                            –ü–æ–Ω—è—Ç–Ω–æ
                    </button>
                    </div>
            </div>
            )}

            <GameOverModal game={game} onRestartToLobby={onRestartToLobby} />
            
            {/* –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–µ–Ω—Å–æ—Ä–∞ - –ø—Ä–∏ –∑–∞–∂–∞—Ç–æ–π –∫–∞—Ä—Ç–µ –∏–ª–∏ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ –æ—Ç–ª–∞–¥–∫–∏ */}
            {(activeCard || showSensorCircle) && mousePosition && (
                <div
                    style={{
                        position: 'fixed',
                        left: mousePosition.x - 80,
                        top: mousePosition.y - 80,
                        width: '160px',
                        height: '160px',
                        border: '2px dashed rgba(255, 255, 0, 0.5)',
                        borderRadius: '50%',
                        pointerEvents: 'none',
                        zIndex: 9999,
                        background: 'rgba(255, 255, 0, 0.1)'
                    }}
                />
            )}
            
            <DragOverlay>
                {activeCard ? (
                    <div style={{
                        width: 120,
                        height: 160,
                        background: "#1f2937",
                        border: "2px solid #10b981",
                        borderRadius: 12,
                            display: "flex",
                            flexDirection: "column",
                            alignItems: "center",
                            justifyContent: "center",
                        fontSize: 12,
                        textAlign: "center",
                        transform: "rotate(5deg)",
                        boxShadow: "0 4px 12px rgba(0, 0, 0, 0.3)",
                    }}>
                        <div>
                            <div style={{ fontWeight: "bold", marginBottom: 4 }}>{activeCard.card.name}</div>
                            <div style={{ opacity: 0.7 }}>Power: {activeCard.card.power}</div>
                            <div style={{ opacity: 0.5, fontSize: 10 }}>
                                {getFactionNames(activeCard.card.factions).join(", ")}
                        </div>
                        </div>
            </div>
                ) : null}
            </DragOverlay>
        </div>
        </DndContext>
    );
}