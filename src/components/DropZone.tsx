import React from 'react';
import { useDroppable } from '@dnd-kit/core';
import type { Card } from '../types';
import DraggableCard from './DraggableCard';

interface DropZoneProps {
    id: string;
    cards: (Card | null)[];
    isAttacking?: boolean;
    isDefending?: boolean;
    maxVisibleCards?: number;
    minVisibleCards?: number;
    onCardClick?: (index: number) => void;
    onCardHover?: (index: number) => void;
    onCardLeave?: () => void;
    gameMode?: 'attack' | 'defense';
    highlightedCardIndex?: number | null;
    defenseCards?: (Card | null)[]; // –ö–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã –¥–ª—è —Å–µ–Ω—Å–æ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ –∞—Ç–∞–∫–∏
    onDefenseCardHover?: (index: number) => void; // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã
    onDefenseCardLeave?: () => void; // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ö–æ–¥–∞ —Å –∫–∞—Ä—Ç –∑–∞—â–∏—Ç—ã
    onMousePositionUpdate?: (position: { x: number; y: number }) => void; // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º—ã—à–∏
    activeCard?: { source: string; card: Card } | null; // –ê–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ–Ω—Å–æ—Ä–∞
    onDropZoneActivate?: (zoneId: string) => void; // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ drop zone
    onDropZoneDeactivate?: () => void; // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ drop zone
    activeDropZone?: string | null; // –ê–∫—Ç–∏–≤–Ω—ã–π drop zone
}

const DropZone: React.FC<DropZoneProps> = ({
    id,
    cards,
    isAttacking = false,
    isDefending = false,
    maxVisibleCards,
    minVisibleCards,
    onCardClick,
    onCardHover,
    onCardLeave,
    gameMode,
    highlightedCardIndex,
    defenseCards = [],
    onDefenseCardHover,
    onDefenseCardLeave,
    onMousePositionUpdate,
    activeCard,
    onDropZoneActivate,
    onDropZoneDeactivate
}) => {
    const { setNodeRef, isOver } = useDroppable({
        id: id,
        // –í—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω–∞—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        disabled: false
    });

    // –í —Ä–µ–∂–∏–º–µ –∑–∞—â–∏—Ç—ã/–∞—Ç–∞–∫–∏, –∫–æ–≥–¥–∞ isOver = true, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–∏–∂–∞–π—à—É—é –∫–∞—Ä—Ç—É –∫ –∫—É—Ä—Å–æ—Ä—É
    React.useEffect(() => {
        console.log(`üîç DropZone —Å–µ–Ω—Å–æ—Ä: gameMode=${gameMode}, id=${id}, isOver=${isOver}, activeCard=${activeCard ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
        // –í —Ä–µ–∂–∏–º–µ –∞—Ç–∞–∫–∏ —Å–µ–Ω—Å–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ, –≤ —Ä–µ–∂–∏–º–µ –∑–∞—â–∏—Ç—ã —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ DropZone
        if (gameMode === 'defense' && id === 'table') {
            console.log(`‚úÖ –°–µ–Ω—Å–æ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${gameMode} —Ä–µ–∂–∏–º–∞`);
            // –í —Ä–µ–∂–∏–º–µ –∑–∞—â–∏—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ–Ω—Å–æ—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–∏ isOver
            if (isOver) {
                const handleMouseMove = (e: MouseEvent | TouchEvent) => {
                    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞/–ø–∞–ª—å—Ü–∞
                    const clientX = 'touches' in e ? e.touches[0]?.clientX || 0 : e.clientX;
                    const clientY = 'touches' in e ? e.touches[0]?.clientY || 0 : e.clientY;
                    // –†–∞–¥–∏—É—Å –Ω–µ–≤–∏–¥–∏–º–æ–≥–æ –∫—Ä—É–≥–∞ –≤–æ–∫—Ä—É–≥ –∫—É—Ä—Å–æ—Ä–∞
                    const sensorRadius = 80;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–µ–Ω—Å–æ—Ä–∞
                    if (onMousePositionUpdate) {
                        onMousePositionUpdate({ x: clientX, y: clientY });
                    }
                    
                    if (gameMode === 'defense' && onCardHover) {
                        // –í —Ä–µ–∂–∏–º–µ –∑–∞—â–∏—Ç—ã –∏—â–µ–º –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏
                        const targetCards = cards.map((card, index) => {
                            if (card) {
                                // –ù–∞—Ö–æ–¥–∏–º DOM —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç—ã
                                const cardElement = document.querySelector(`[data-card-index="${index}"]`);
                                if (cardElement) {
                                    const rect = cardElement.getBoundingClientRect();
                                    const cardCenterX = rect.left + rect.width / 2;
                                    const cardCenterY = rect.top + rect.height / 2;
                                    
                                    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∫—É—Ä—Å–æ—Ä–∞ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã
                                    const distance = Math.sqrt(
                                        Math.pow(clientX - cardCenterX, 2) + 
                                        Math.pow(clientY - cardCenterY, 2)
                                    );
                                    
                                    return { index, distance, card };
                                }
                            }
                            return null;
                        }).filter(item => item !== null);

                        if (targetCards.length > 0) {
                            // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –∫–∞—Ä—Ç—É –≤ —Ä–∞–¥–∏—É—Å–µ —Å–µ–Ω—Å–æ—Ä–∞
                            const closestCard = targetCards
                                .filter(item => item!.distance <= sensorRadius)
                                .sort((a, b) => a!.distance - b!.distance)[0];

                            if (closestCard) {
                                console.log(`üéØ –ë–ª–∏–∂–∞–π—à–∞—è –∫–∞—Ä—Ç–∞ –∞—Ç–∞–∫–∏:`, closestCard.index, '—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ:', closestCard.distance);
                                onCardHover(closestCard.index);
                            } else {
                                // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç –≤ —Ä–∞–¥–∏—É—Å–µ, –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é
                                const nearestCard = targetCards.sort((a, b) => a!.distance - b!.distance)[0];
                                if (nearestCard) {
                                    console.log(`üéØ –ë–ª–∏–∂–∞–π—à–∞—è –∫–∞—Ä—Ç–∞ –∞—Ç–∞–∫–∏ (–≤–Ω–µ —Ä–∞–¥–∏—É—Å–∞):`, nearestCard.index, '—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ:', nearestCard.distance);
                                    onCardHover(nearestCard.index);
                                }
                            }
                        }
                    }
                };

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º—ã—à–∏ –∏ —Ç–∞—á-—Å–æ–±—ã—Ç–∏–π
                document.addEventListener('mousemove', handleMouseMove);
                document.addEventListener('touchmove', handleMouseMove);

                return () => {
                    document.removeEventListener('mousemove', handleMouseMove);
                    document.removeEventListener('touchmove', handleMouseMove);
                };
            } else if (!isOver) {
                // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫–æ–≥–¥–∞ —É—Ö–æ–¥–∏–º —Å–æ —Å—Ç–æ–ª–∞
                if (gameMode === 'defense' && onCardLeave) {
                    onCardLeave();
                }
            }
        }
    }, [isOver, gameMode, id, cards, defenseCards, onCardHover, onCardLeave, onDefenseCardHover, onDefenseCardLeave, onMousePositionUpdate, activeCard]);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª
    const needsScroll = maxVisibleCards && cards.length > maxVisibleCards;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç
    const cardWidth = 120; // —à–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç—ã
    const cardGap = 16; // –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
    const containerPadding = 40; // padding –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (20px —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã)
    
    // –í—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    let containerWidth: string | number;
    
    if (needsScroll) {
        // –î–ª—è —Ä—É–∫–∏ —Å —Å–∫—Ä–æ–ª–ª–æ–º: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –ø–æ–¥ maxVisibleCards –∫–∞—Ä—Ç
        containerWidth = (maxVisibleCards * cardWidth) + ((maxVisibleCards - 1) * cardGap) + containerPadding;
    } else if (minVisibleCards) {
        // –î–ª—è —Å—Ç–æ–ª–∞: –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞—Ä—Ç + 1 –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç
        const realCardCount = cards.filter(card => card !== null).length;
        const displayCardCount = Math.max(realCardCount + 1, minVisibleCards);
        containerWidth = (displayCardCount * cardWidth) + ((displayCardCount - 1) * cardGap) + containerPadding;
    } else {
        // –î–ª—è —Ä—É–∫–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞
        containerWidth = 'auto';
    }

    return (
        <div
            ref={setNodeRef}
            onMouseEnter={() => {
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º drop zone —á–µ—Ä–µ–∑ –∫—É—Ä—Å–æ—Ä (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ —Å–µ–Ω—Å–æ—Ä–æ–º)
                console.log(`üîç –ö–£–†–°–û–† ENTER: id=${id}, activeCard=${!!activeCard}, onDropZoneActivate=${!!onDropZoneActivate}`);
                if (onDropZoneActivate && activeCard) {
                    console.log(`üéØ –ö–£–†–°–û–†: –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç drop zone ${id}`);
                    onDropZoneActivate(id);
                }
            }}
            onMouseLeave={() => {
                // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º drop zone —á–µ—Ä–µ–∑ –∫—É—Ä—Å–æ—Ä
                console.log(`üîç –ö–£–†–°–û–† LEAVE: id=${id}, onDropZoneDeactivate=${!!onDropZoneDeactivate}`);
                if (onDropZoneDeactivate) {
                    console.log(`üéØ –ö–£–†–°–û–†: –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç drop zone ${id}`);
                    onDropZoneDeactivate();
                }
            }}
            style={{
                display: "flex",
                flexWrap: needsScroll ? "nowrap" : (minVisibleCards ? "nowrap" : "wrap"),
                gap: cardGap,
                minHeight: 160,
                padding: "20px",
                borderRadius: 12,
                background: (isOver && gameMode === 'attack') 
                    ? "rgba(139, 0, 0, 0.1)" 
                    : "rgba(0, 0, 0, 0.1)",
                border: (isOver && gameMode === 'attack') 
                    ? "2px dashed #8B0000" 
                    : "2px dashed #334155",
                transition: "all 0.2s ease",
                justifyContent: needsScroll ? "flex-start" : (minVisibleCards ? "center" : "center"),
                width: containerWidth,
                overflow: needsScroll ? "auto" : "visible",
                scrollbarWidth: "thin",
                scrollbarColor: "#8B0000 #1f2937",
                                    position: "relative",
                    zIndex: minVisibleCards ? 100 : 10, // –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π z-index –¥–ª—è —Å—Ç–æ–ª–∞
            }}
        >
            {(() => {
                if (minVisibleCards) {
                    // –î–ª—è —Å—Ç–æ–ª–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã + 1 –ø—É—Å—Ç–æ–π
                    const filledSlots = cards.filter(card => card !== null);
                    const displayCards: (Card | null)[] = [...filledSlots];
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã
                    if (displayCards.length < minVisibleCards) {
                        displayCards.push(null);
                    }
                    
                    return displayCards.map((card, displayIndex) => {
                        if (card) {
                            // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ slots
                            const realIndex = cards.findIndex((originalCard) => 
                                originalCard && originalCard.id === card.id
                            );
                            
                            return (
                                <DraggableCard
                                    key={`${id}-card-${realIndex}`}
                                    card={card}
                                    index={realIndex}
                                    isInHand={id === 'my-hand'}
                                    isAttacking={isAttacking}
                                    isDefending={isDefending}
                                    onClick={() => onCardClick?.(realIndex)}
                                    onMouseEnter={() => onCardHover?.(realIndex)}
                                    onMouseLeave={onCardLeave}
                                    isHighlighted={highlightedCardIndex === realIndex}
                                    isDraggable={id === 'my-hand'} // –¢–æ–ª—å–∫–æ –∫–∞—Ä—Ç—ã –≤ —Ä—É–∫–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å
                                />
                            );
                        } else {
                            return (
                                <div
                                    key={`${id}-empty-${displayIndex}`}
                                    style={{
                                        height: 160,
                                        width: 120,
                                        borderRadius: 12,
                                        border: "2px dashed #334155",
                                        background: "rgba(0, 0, 0, 0.05)",
                                        color: "#fff",
                                        cursor: "default",
                                        display: "flex",
                                        flexDirection: "column",
                                        alignItems: "center",
                                        justifyContent: "center",
                                        padding: "8px",
                                        transition: "all 0.2s ease",
                                        position: "relative",
                                    }}
                                >
                                    <span style={{ 
                                        fontSize: "14px", 
                                        opacity: 0.5,
                                        color: "#666"
                                    }}>
                                        –ü—É—Å—Ç–æ
                                    </span>
                                </div>
                            );
                        }
                    });
                } else {
                    // –î–ª—è —Ä—É–∫–∏: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –∫–∞–∫ –æ–±—ã—á–Ω–æ
                    return cards.map((card, index) => (
                        card ? (
                            <DraggableCard
                                key={`${id}-card-${index}`}
                                card={card}
                                index={index}
                                isInHand={id === 'my-hand'}
                                isAttacking={isAttacking}
                                isDefending={isDefending}
                                onClick={() => onCardClick?.(index)}
                                isDraggable={id === 'my-hand'}
                            />
                        ) : (
                            <div
                                key={`${id}-empty-${index}`}
                                style={{
                                    height: 160,
                                    width: 120,
                                    borderRadius: 12,
                                    border: "2px dashed #334155",
                                    background: "rgba(0, 0, 0, 0.05)",
                                    color: "#fff",
                                    cursor: "default",
                                    display: "flex",
                                    flexDirection: "column",
                                    alignItems: "center",
                                    justifyContent: "center",
                                    padding: "8px",
                                    transition: "all 0.2s ease",
                                    position: "relative",
                                }}
                            >
                                <span style={{ 
                                    fontSize: "14px", 
                                    opacity: 0.5,
                                    color: "#666"
                                }}>
                                    –ü—É—Å—Ç–æ
                                </span>
                            </div>
                        )
                    ));
                }
            })()}
        </div>
    );
};

export default DropZone;
