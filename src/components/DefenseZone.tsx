import React from 'react';
import { useDroppable } from '@dnd-kit/core';
import type { Card } from '../types';
import DraggableCard from './DraggableCard';

interface DefenseZoneProps {
    attackCards: (Card | null)[];
    defenseCards: (Card | null)[];
    onCardClick?: (attackIndex: number) => void;
    onCardHover?: (attackIndex: number) => void;
    onCardLeave?: () => void;
    highlightedCardIndex?: number | null;
    gameMode?: 'attack' | 'defense';
    invalidDefenseCard?: number | null; // –ò–Ω–¥–µ–∫—Å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã
}

const DefenseZone: React.FC<DefenseZoneProps> = ({
    attackCards,
    defenseCards,
    onCardClick,
    onCardHover,
    onCardLeave,
    highlightedCardIndex,
    gameMode,
    invalidDefenseCard
}) => {
    // –í—ã—á–∏—Å–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç –∞—Ç–∞–∫–∏
    const attackCardsCount = attackCards.filter(card => card !== null).length;
    const cardWidth = 120; // –®–∏—Ä–∏–Ω–∞ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã
    const cardGap = 10; // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
    const containerPadding = 20; // –û—Ç—Å—Ç—É–ø—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    
    const containerWidth = attackCardsCount > 0 
        ? attackCardsCount * cardWidth + (attackCardsCount - 1) * cardGap + containerPadding * 2
        : cardWidth + containerPadding * 2; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã

    return (
        <div
            style={{
                width: `${containerWidth}px`,
                minHeight: "200px",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                gap: `${cardGap}px`,
                padding: `${containerPadding}px`,
                background: "rgba(65, 105, 225, 0.05)", // –õ–µ–≥–∫–∏–π —Å–∏–Ω–∏–π —Ñ–æ–Ω
                border: "2px dashed rgba(65, 105, 225, 0.3)",
                borderRadius: "12px",
                margin: "0 auto 20px auto",
                position: "relative"
            }}
        >
            {attackCards.map((attackCard, attackIndex) => {
                if (!attackCard) return null; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∞ –∞—Ç–∞–∫–∏
                
                const defenseCard = defenseCards[attackIndex];
                
                return (
                    <DefenseCardDropZone
                        key={`defense-slot-${attackIndex}`}
                        attackIndex={attackIndex}
                        cardWidth={cardWidth}
                        defenseCard={defenseCard}
                        highlightedCardIndex={highlightedCardIndex}
                        gameMode={gameMode}
                        onCardHover={onCardHover}
                        onCardLeave={onCardLeave}
                        onCardClick={onCardClick}
                        invalidDefenseCard={invalidDefenseCard}
                    />
                );
            })}
        </div>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã —Å drop zone
const DefenseCardDropZone: React.FC<{
    attackIndex: number;
    cardWidth: number;
    defenseCard: Card | null;
    highlightedCardIndex?: number | null;
    gameMode?: 'attack' | 'defense';
    onCardHover?: (attackIndex: number) => void;
    onCardLeave?: () => void;
    onCardClick?: (attackIndex: number) => void;
    invalidDefenseCard?: number | null;
}> = ({
    attackIndex,
    cardWidth,
    defenseCard,
    highlightedCardIndex,
    gameMode,
    onCardHover,
    onCardLeave,
    onCardClick,
    invalidDefenseCard
}) => {
    const { setNodeRef, isOver } = useDroppable({
        id: `defense-card-${attackIndex}`,
        data: {
            type: 'defense-card',
            attackIndex
        },
        disabled: gameMode === 'attack' && defenseCard === null // –û—Ç–∫–ª—é—á–∞–µ–º drop zone –¥–ª—è –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –∞—Ç–∞–∫–∏
    });

    return (
        <div
            ref={setNodeRef}
            data-defense-card-index={attackIndex}
            style={{
                width: `${cardWidth}px`,
                height: "160px",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                position: "relative",
                border: isOver ? "2px solid #32CD32" : "none",
                borderRadius: "12px",
                // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∫–∞—Ä—Ç
                backgroundColor: invalidDefenseCard === attackIndex ? "rgba(255, 0, 0, 0.1)" : "transparent",
                boxShadow: invalidDefenseCard === attackIndex ? "0 0 10px rgba(255, 0, 0, 0.5)" : "none"
            }}
        >
            <div
                onMouseEnter={() => {
                    // –í —Ä–µ–∂–∏–º–µ –∞—Ç–∞–∫–∏ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–ª–æ—Ç—ã –∑–∞—â–∏—Ç—ã
                    console.log(`üîç DEFENSE ENTER: attackIndex=${attackIndex}, gameMode=${gameMode}, defenseCard=${!!defenseCard}`);
                    if (gameMode !== 'attack') {
                        console.log(`üéØ DEFENSE: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ö–æ–≤–µ—Ä –¥–ª—è —Å–ª–æ—Ç–∞ ${attackIndex}`);
                        onCardHover?.(attackIndex);
                    } else {
                        console.log(`üö´ DEFENSE: –ë–ª–æ–∫–∏—Ä—É–µ–º —Ö–æ–≤–µ—Ä –≤ —Ä–µ–∂–∏–º–µ –∞—Ç–∞–∫–∏ –¥–ª—è —Å–ª–æ—Ç–∞ ${attackIndex}`);
                    }
                }}
                onMouseLeave={() => {
                    // –í —Ä–µ–∂–∏–º–µ –∞—Ç–∞–∫–∏ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–ª–æ—Ç—ã –∑–∞—â–∏—Ç—ã
                    console.log(`üîç DEFENSE LEAVE: attackIndex=${attackIndex}, gameMode=${gameMode}`);
                    if (gameMode !== 'attack') {
                        console.log(`üéØ DEFENSE: –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ö–æ–≤–µ—Ä –¥–ª—è —Å–ª–æ—Ç–∞ ${attackIndex}`);
                        onCardLeave?.();
                    } else {
                        console.log(`üö´ DEFENSE: –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é –≤ —Ä–µ–∂–∏–º–µ –∞—Ç–∞–∫–∏ –¥–ª—è —Å–ª–æ—Ç–∞ ${attackIndex}`);
                    }
                }}
                style={{
                    cursor: gameMode === 'attack' ? 'not-allowed' : 'default', // –í —Ä–µ–∂–∏–º–µ –∞—Ç–∞–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º not-allowed
                    opacity: gameMode === 'attack' ? 0.5 : 1 // –ü—Ä–∏–≥–ª—É—à–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –≤ —Ä–µ–∂–∏–º–µ –∞—Ç–∞–∫–∏
                }}
            >
                {defenseCard ? (
                    <DraggableCard
                        card={defenseCard}
                        index={attackIndex}
                        isDefending={true}
                        onClick={() => onCardClick?.(attackIndex)}
                        onMouseEnter={() => onCardHover?.(attackIndex)}
                        onMouseLeave={onCardLeave}
                        isDraggable={false} // –ö–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã –ø–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º
                        isDefenseHighlighted={highlightedCardIndex === attackIndex}
                        disableMouseEvents={gameMode === 'attack'} // –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏ –≤ —Ä–µ–∂–∏–º–µ –∞—Ç–∞–∫–∏
                    />
                ) : (
                    <div
                        style={{
                            width: `${cardWidth}px`,
                            height: "160px",
                            border: highlightedCardIndex === attackIndex 
                                ? "2px solid #32CD32" // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
                                : invalidDefenseCard === attackIndex
                                ? "2px solid #FF0000" // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∫–∞—Ä—Ç
                                : "2px dashed rgba(65, 105, 225, 0.3)",
                            borderRadius: "12px",
                            display: "flex",
                            alignItems: "center",
                            justifyContent: "center",
                            color: highlightedCardIndex === attackIndex 
                                ? "#32CD32" // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
                                : invalidDefenseCard === attackIndex
                                ? "#FF0000" // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∫–∞—Ä—Ç
                                : "rgba(65, 105, 225, 0.5)",
                            fontSize: "12px",
                            background: highlightedCardIndex === attackIndex 
                                ? "rgba(50, 205, 50, 0.1)" // –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
                                : invalidDefenseCard === attackIndex
                                ? "rgba(255, 0, 0, 0.1)" // –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∫–∞—Ä—Ç
                                : "rgba(65, 105, 225, 0.05)"
                        }}
                    >
                        {invalidDefenseCard === attackIndex ? "‚ùå –°–ª–∞–±–∞—è" : "–ó–∞—â–∏—Ç–∞"}
                    </div>
                )}
            </div>
        </div>
    );
};

export default DefenseZone;
