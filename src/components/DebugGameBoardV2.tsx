import React, { useState, useEffect } from 'react';
import { DndContext, DragOverlay } from '@dnd-kit/core';
import type { DragEndEvent, DragStartEvent } from '@dnd-kit/core';
import type { GameState, Card } from "../types";
import { CARDS_DATA, FACTIONS } from "../engine/cards";
import DropZone from "./DropZone";
import DefenseZone from "./DefenseZone";

// –ü—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª —Å seed (–∫–∞–∫ –≤ ML)
class SeededRandom {
    private seed: number;
    
    constructor(seed: number) {
        this.seed = seed;
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
    next(): number {
        this.seed = (this.seed * 9301 + 49297) % 233280;
        return this.seed / 233280;
    }
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º seed
    shuffle<T>(array: T[]): T[] {
        const shuffled = [...array];
        for (let i = shuffled.length - 1; i > 0; i--) {
            const j = Math.floor(this.next() * (i + 1));
            [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
        }
        return shuffled;
    }
}

// –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
const createBasicGameState = (seed: number = 42): GameState => {
    // –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª —Å seed
    const random = new SeededRandom(seed);
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–ª–æ–¥—É –∏–∑ –≤—Å–µ—Ö –∫–∞—Ä—Ç –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –µ—ë
    const shuffledDeck = random.shuffle([...CARDS_DATA]);
    
    // –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã 4 –∏–≥—Ä–æ–∫–∞–º (–ø–æ 6 –∫–∞—Ä—Ç –∫–∞–∂–¥–æ–º—É)
    const player1Cards = shuffledDeck.splice(0, 6);
    const player2Cards = shuffledDeck.splice(0, 6);
    const player3Cards = shuffledDeck.splice(0, 6);
    const player4Cards = shuffledDeck.splice(0, 6);
    
    // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ä—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –≤ –∫–æ–ª–æ–¥–µ
    const remainingDeck = shuffledDeck;
    
    return {
        phase: "playing",
        hostId: "player-1",
        players: {
            "player-1": { name: "Player 1" },
            "player-2": { name: "Player 2" },
            "player-3": { name: "Player 3" },
            "player-4": { name: "Player 4" },
        },
        hands: {
            "player-1": player1Cards,
            "player-2": player2Cards,
            "player-3": player3Cards,
            "player-4": player4Cards
        },
        slots: [null, null, null, null, null, null], // –ü—É—Å—Ç–æ–π —Å—Ç–æ–ª –¥–ª—è –∞—Ç–∞–∫—É—é—â–∏—Ö –∫–∞—Ä—Ç
        defenseSlots: [null, null, null, null, null, null], // –ü—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∑–∞—â–∏—Ç—ã
        playerCountAtStart: 3,
        winnerId: undefined,
        startedAt: Date.now(),
        
        // Turn system
        currentTurn: "player-1",
        turnOrder: ["player-1", "player-2", "player-3", "player-4"],
        currentTurnIndex: 0,
        turnPhase: "play",
        
        // Game mechanics
        attackingCard: null,
        defendingCard: null,
        attackTarget: undefined,
        canPass: true,
        canTakeCards: true,
        
        // Card draw system
        deck: remainingDeck,
        discardPile: [],
        maxHandSize: 6,
        cardsDrawnThisTurn: {},
        canDrawCards: true,
        
        // Faction system
        availableTargets: ["player-2", "player-3", "player-4"],
        factionBonuses: {},
        targetSelectionMode: false,
        selectedTarget: undefined,
        factionEffects: {},
        activeFactions: [],
        
        // Card power system
        minCardPower: 50,
        maxCardPower: 100,
        canDefendWithEqualPower: true,
        
        // Turn control system
        turnActions: {
            canEndTurn: true,
            canPass: true,
            canTakeCards: true,
            canAttack: true,
            canDefend: false,
        },
        turnHistory: [
            {
                playerId: "player-1",
                action: "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å",
                timestamp: Date.now(),
            }
        ],
    };
};

interface DebugGameBoardV2Props {
    onBack?: () => void;
}

const DebugGameBoardV2: React.FC<DebugGameBoardV2Props> = ({ onBack }) => {
    const [seed, setSeed] = useState<number>(42);
    const [gameState, setGameState] = useState<GameState>(createBasicGameState(seed));
    const [currentPlayerId, setCurrentPlayerId] = useState<string>("player-1");
    const [activeCard, setActiveCard] = useState<{ card: Card; index: number; source: string } | null>(null);
    const [gameMode, setGameMode] = useState<'attack' | 'defense'>('attack');
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç
    console.log('üöÄ DebugGameBoardV2 –∑–∞–≥—Ä—É–∂–µ–Ω!', { gameMode });
    const [defenseCards, setDefenseCards] = useState<(Card | null)[]>([]); // –ö–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å –∫–∞—Ä—Ç–∞–º–∏ –∞—Ç–∞–∫–∏
    const [hoveredAttackCard, setHoveredAttackCard] = useState<number | null>(null); // –ò–Ω–¥–µ–∫—Å –Ω–∞–≤–µ–¥–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏
    const [hoveredDefenseCard, setHoveredDefenseCard] = useState<number | null>(null); // –ò–Ω–¥–µ–∫—Å –Ω–∞–≤–µ–¥–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã
    const [mousePosition, setMousePosition] = useState<{ x: number; y: number } | null>(null); // –ü–æ–∑–∏—Ü–∏—è –º—ã—à–∏
    const [showSensorCircle, setShowSensorCircle] = useState<boolean>(false); // –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–≤–∏–¥–∏–º—ã–π –∫—Ä—É–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const [activeDropZone, setActiveDropZone] = useState<string | null>(null);
    const [dropZoneTimeout, setDropZoneTimeout] = useState<number | null>(null); // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ drop zone
    const [invalidDefenseCard, setInvalidDefenseCard] = useState<number | null>(null); // –ò–Ω–¥–µ–∫—Å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã
    const [canTakeCards, setCanTakeCards] = useState<boolean>(false); // –ú–æ–∂–Ω–æ –ª–∏ –≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã
    const [activeFactions, setActiveFactions] = useState<string[]>([]);
    
    // –°—á—ë—Ç—á–∏–∫ —Ñ—Ä–∞–∫—Ü–∏–π: {factionId: count}
    const [factionCounter, setFactionCounter] = useState<Record<number, number>>({}); // –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ (–Ω–∞–∑–≤–∞–Ω–∏—è)
    
    // –ë—É—Ñ–µ—Ä –¥–ª—è —Ñ—Ä–∞–∫—Ü–∏–π –æ—Ç –∫–∞—Ä—Ç –∑–∞—â–∏—Ç—ã (—á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –∏—Ö –ø—Ä–∏ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è)
    const [defenseFactionsBuffer, setDefenseFactionsBuffer] = useState<Record<number, number>>({});
    
    // –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏ (—Ç–µ, —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π)
    const [activeFirstAttackFactions, setActiveFirstAttackFactions] = useState<number[]>([]);
    
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã: {cardId: [factionIds]}
    const [usedDefenseCardFactions, setUsedDefenseCardFactions] = useState<Record<string, number[]>>({});

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º—ã—à–∏ –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Å–µ–Ω—Å–æ—Ä–∞
    React.useEffect(() => {
        if (showSensorCircle) {
            const handleGlobalMouseMove = (e: MouseEvent) => {
                setMousePosition({ x: e.clientX, y: e.clientY });
            };

            document.addEventListener('mousemove', handleGlobalMouseMove);

            return () => {
                document.removeEventListener('mousemove', handleGlobalMouseMove);
            };
        }
    }, [showSensorCircle]);

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ–Ω—Å–æ—Ä –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
    React.useEffect(() => {
        if (activeCard && activeCard.source === 'hand') {
            console.log('üéØ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ–Ω—Å–æ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–∞—Ä—Ç—ã:', activeCard.card.name);
            
            const handleGlobalMouseMove = (e: MouseEvent) => {
                const clientX = e.clientX;
                const clientY = e.clientY;
                const sensorRadius = 80;

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–µ–Ω—Å–æ—Ä–∞
                setMousePosition({ x: clientX, y: clientY });

                // –ò—â–µ–º –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏
                const attackCardElements = document.querySelectorAll('[data-card-index]');
                let closestAttackCard: Element | null = null;
                let closestAttackDistance = Infinity;

                attackCardElements.forEach((element) => {
                    const rect = element.getBoundingClientRect();
                    const cardCenterX = rect.left + rect.width / 2;
                    const cardCenterY = rect.top + rect.height / 2;
                    
                    const distance = Math.sqrt(
                        Math.pow(clientX - cardCenterX, 2) + 
                        Math.pow(clientY - cardCenterY, 2)
                    );

                    if (distance < closestAttackDistance) {
                        closestAttackDistance = distance;
                        closestAttackCard = element;
                    }
                });

                // –ò—â–µ–º –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã
                const defenseCardElements = document.querySelectorAll('[data-defense-card-index]');
                console.log('üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞—â–∏—Ç—ã:', defenseCardElements.length);
                let closestDefenseCard: Element | null = null;
                let closestDefenseDistance = Infinity;

                defenseCardElements.forEach((element, idx) => {
                    const rect = element.getBoundingClientRect();
                    const cardCenterX = rect.left + rect.width / 2;
                    const cardCenterY = rect.top + rect.height / 2;
                    
                    const distance = Math.sqrt(
                        Math.pow(clientX - cardCenterX, 2) + 
                        Math.pow(clientY - cardCenterY, 2)
                    );

                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å–ª–æ—Ç–∞ –∑–∞—â–∏—Ç—ã
                    const defenseIndex = parseInt((element as Element).getAttribute('data-defense-card-index') || '0');
                    
                    // –í —Ä–µ–∂–∏–º–µ –∞—Ç–∞–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã
                    if (gameMode === 'attack' && defenseCards[defenseIndex] === null) {
                        console.log(`üîç –ö–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã ${idx}: —Å–ª–æ—Ç –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                        return;
                    }

                    console.log(`üîç –ö–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã ${idx}: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ${distance.toFixed(2)}px`);

                    if (distance < closestDefenseDistance) {
                        closestDefenseDistance = distance;
                        closestDefenseCard = element;
                    }
                });

                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ö–æ–≤–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
                console.log(`üîç –û–¢–õ–ê–î–ö–ê: gameMode=${gameMode}, activeDropZone=${activeDropZone}, closestAttackCard=${!!closestAttackCard}, closestDefenseCard=${!!closestDefenseCard}`);
                
                if (gameMode === 'defense') {
                    // –í —Ä–µ–∂–∏–º–µ –∑–∞—â–∏—Ç—ã: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞—Ä—Ç–∞–º –∞—Ç–∞–∫–∏
                    if (closestAttackCard && closestAttackDistance <= sensorRadius) {
                        const attackIndex = parseInt((closestAttackCard as Element).getAttribute('data-card-index') || '0');
                        console.log(`üéØ –°–ï–ù–°–û–†: –ö–∞—Ä—Ç–∞ –∞—Ç–∞–∫–∏ ${attackIndex} –≤ —Ä–∞–¥–∏—É—Å–µ (—Ä–µ–∂–∏–º –∑–∞—â–∏—Ç—ã)`);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏
                        if (activeCard && activeCard.source === 'hand') {
                            const isValid = checkDefenseCardValidity(activeCard.card, attackIndex);
                            if (!isValid) {
                                console.log(`‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø: –ö–∞—Ä—Ç–∞ "${activeCard.card.name}" (${activeCard.card.power}) –Ω–µ –º–æ–∂–µ—Ç –∑–∞—â–∏—Ç–∏—Ç—å –æ—Ç –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏ ${attackIndex}`);
                                setInvalidDefenseCard(attackIndex);
                            } else {
                                setInvalidDefenseCard(null);
                            }
                        }
                        
                        setHoveredAttackCard(attackIndex);
                        setHoveredDefenseCard(null);
                        setActiveDropZone('attack-card');
                    } else {
                        setHoveredAttackCard(null);
                        setHoveredDefenseCard(null);
                        setActiveDropZone(null);
                        setInvalidDefenseCard(null);
                    }
                } else if (gameMode === 'attack') {
                    // –í —Ä–µ–∂–∏–º–µ –∞—Ç–∞–∫–∏: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ drop zone —á–µ—Ä–µ–∑ –∫—É—Ä—Å–æ—Ä
                    console.log(`üîç –û–¢–õ–ê–î–ö–ê –ê–¢–ê–ö–ò: activeDropZone=${activeDropZone}, closestDefenseCard=${!!closestDefenseCard}, closestDefenseDistance=${closestDefenseDistance}, sensorRadius=${sensorRadius}`);
                    
                    if (activeDropZone) {
                        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω drop zone —á–µ—Ä–µ–∑ –∫—É—Ä—Å–æ—Ä, –±–ª–æ–∫–∏—Ä—É–µ–º —Å–µ–Ω—Å–æ—Ä
                        console.log(`üéØ –°–ï–ù–°–û–†: Drop zone ${activeDropZone} –∞–∫—Ç–∏–≤–µ–Ω —á–µ—Ä–µ–∑ –∫—É—Ä—Å–æ—Ä, –±–ª–æ–∫–∏—Ä—É–µ–º —Å–µ–Ω—Å–æ—Ä`);
                        setHoveredAttackCard(null);
                        setHoveredDefenseCard(null);
                    } else if (closestDefenseCard && closestDefenseDistance <= sensorRadius) {
                        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ drop zone, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–∞—Ä—Ç–∞–º–∏ –∑–∞—â–∏—Ç—ã —á–µ—Ä–µ–∑ —Å–µ–Ω—Å–æ—Ä
                        const defenseIndex = parseInt((closestDefenseCard as Element).getAttribute('data-defense-card-index') || '0');
                        
                        console.log(`üéØ –°–ï–ù–°–û–†: –ö–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã ${defenseIndex} –≤ —Ä–∞–¥–∏—É—Å–µ (—Ä–µ–∂–∏–º –∞—Ç–∞–∫–∏)`);
                        setHoveredDefenseCard(defenseIndex);
                        setHoveredAttackCard(null);
                        setActiveDropZone('defense-card');
                    } else {
                        console.log(`üéØ –°–ï–ù–°–û–†: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ`);
                        setHoveredAttackCard(null);
                        setHoveredDefenseCard(null);
                        setActiveDropZone(null);
                    }
                }
            };

            document.addEventListener('mousemove', handleGlobalMouseMove);

            return () => {
                document.removeEventListener('mousemove', handleGlobalMouseMove);
            };
        }
    }, [gameMode, activeCard]);

    // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    React.useEffect(() => {
        return () => {
            if (dropZoneTimeout) {
                clearTimeout(dropZoneTimeout);
            }
        };
    }, [dropZoneTimeout]);

    // –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã
    const validateDefenseCard = (defenseCard: Card, attackCard: Card): boolean => {
        // –ö–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Å–∏–ª—É –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω—É—é –∫–∞—Ä—Ç–µ –∞—Ç–∞–∫–∏
        return defenseCard.power >= attackCard.power;
    };

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    const checkDefenseCardValidity = (defenseCard: Card, attackCardIndex: number): boolean => {
        const attackCard = gameState.slots?.[attackCardIndex];
        if (!attackCard) return false;
        return validateDefenseCard(defenseCard, attackCard);
    };

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –º–æ–∂–Ω–æ –ª–∏ –≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã
    const checkCanTakeCards = (): boolean => {
        // –ú–æ–∂–Ω–æ –≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –∑–∞—â–∏—Ç—ã
        if (gameMode !== 'defense') return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–æ—Ç–±–∏—Ç—ã–µ –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏
        const attackCards = gameState.slots || [];
        const hasUnbeatenCards = attackCards.some((attackCard, index) => {
            if (!attackCard) return false;
            const defenseCard = defenseCards[index];
            return defenseCard === null; // –ö–∞—Ä—Ç–∞ –∞—Ç–∞–∫–∏ –Ω–µ –æ—Ç–±–∏—Ç–∞, –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã
        });
        
        return hasUnbeatenCards;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ—Ä–∞–∫—Ü–∏–π –ø–æ ID
    const getFactionNames = (factionIds: number[]): string[] => {
        return factionIds.map(id => FACTIONS[id] || `Unknown Faction ${id}`);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–∞ –ø–µ—Ä–≤–æ–π –≤ –∞—Ç–∞–∫–µ
    const isFirstAttackCard = (): boolean => {
        const attackCards = gameState.slots || [];
        return attackCards.filter(card => card !== null).length === 0;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—Ä–∞–∫—Ü–∏–π –∏–∑ –∫–∞—Ä—Ç—ã
    const setActiveFactionsFromCard = (card: Card) => {
        const factionNames = getFactionNames(card.factions);
        setActiveFactions(factionNames);
        setActiveFirstAttackFactions(card.factions); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã
        console.log(`üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏:`, factionNames);
        console.log(`üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã:`, card.factions);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Ñ—Ä–∞–∫—Ü–∏–π
    const hasCommonFactions = (cardFactions: number[], activeFactionIds: number[]): boolean => {
        return cardFactions.some(factionId => activeFactionIds.includes(factionId));
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –º–æ–∂–µ—Ç –ª–∏ –∫–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—Ä–∞–∫—Ü–∏—é
    const canDefenseCardUseFaction = (defenseCard: Card, factionId: number): boolean => {
        const usedFactions = usedDefenseCardFactions[defenseCard.id] || [];
        return !usedFactions.includes(factionId);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Ñ—Ä–∞–∫—Ü–∏–π
    const getFactionIntersection = (cardFactions: number[], activeFactionIds: number[]): number[] => {
        return cardFactions.filter(factionId => activeFactionIds.includes(factionId));
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—Ä–∞–∫—Ü–∏–π –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏
    const getFirstAttackCardFactions = (): number[] => {
        const attackCards = gameState.slots?.filter(card => card !== null) || [];
        if (attackCards.length === 0) return [];
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏
        return attackCards[0].factions;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –¥–∏–≤–∞ –∞—Ç–∞–∫–∏)
    const validateAttackCard = (card: Card): { isValid: boolean; reason?: string } => {
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±—É—é
        if (isFirstAttackCard()) {
            return { isValid: true };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –ê–ö–¢–ò–í–ù–´–ú–ò —Ñ—Ä–∞–∫—Ü–∏—è–º–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏
        if (activeFirstAttackFactions.length === 0) {
            return { isValid: false, reason: "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—Ä–∞–∫—Ü–∏–π –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏" };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¢–û–õ–¨–ö–û —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ñ—Ä–∞–∫—Ü–∏—è–º–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏
        if (!hasCommonFactions(card.factions, activeFirstAttackFactions)) {
            const cardFactionNames = getFactionNames(card.factions);
            const activeFirstAttackFactionNames = getFactionNames(activeFirstAttackFactions);
            return { 
                isValid: false, 
                reason: `–ö–∞—Ä—Ç–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –æ–±—â—É—é —Ñ—Ä–∞–∫—Ü–∏—é —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ñ—Ä–∞–∫—Ü–∏—è–º–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏: ${activeFirstAttackFactionNames.join(', ')}. –£ –∫–∞—Ä—Ç—ã: ${cardFactionNames.join(', ')}` 
            };
        }

        return { isValid: true };
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —Ñ—Ä–∞–∫—Ü–∏–π
    const updateFactionCounter = (factionIds: number[], increment: number = 1) => {
        setFactionCounter(prev => {
            const newCounter = { ...prev };
            factionIds.forEach(factionId => {
                newCounter[factionId] = (newCounter[factionId] || 0) + increment;
                if (newCounter[factionId] <= 0) {
                    delete newCounter[factionId];
                }
            });
            return newCounter;
        });
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—Ä–∞–∫—Ü–∏–π –æ—Ç –∫–∞—Ä—Ç –∑–∞—â–∏—Ç—ã –≤ –±—É—Ñ–µ—Ä
    const saveDefenseFactionsToBuffer = (currentFactionCounter: Record<number, number>) => {
        const newBuffer: Record<number, number> = {};
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ—Ä–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —è–≤–ª—è—é—Ç—Å—è —Ñ—Ä–∞–∫—Ü–∏—è–º–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏
        const firstAttackFactions = getFirstAttackCardFactions();
        const firstAttackSet = new Set(firstAttackFactions);
        
        Object.keys(currentFactionCounter).forEach(factionIdStr => {
            const factionId = parseInt(factionIdStr);
            if (!firstAttackSet.has(factionId) && currentFactionCounter[factionId] > 0) {
                newBuffer[factionId] = currentFactionCounter[factionId];
            }
        });
        
        setDefenseFactionsBuffer(newBuffer);
        console.log(`üéØ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ñ—Ä–∞–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—ã –≤ –±—É—Ñ–µ—Ä:`, Object.keys(newBuffer).map(id => `${FACTIONS[parseInt(id)]}(${newBuffer[parseInt(id)]})`));
        return newBuffer;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—Ä–∞–∫—Ü–∏–π –æ—Ç –∫–∞—Ä—Ç –∑–∞—â–∏—Ç—ã –∏–∑ –±—É—Ñ–µ—Ä–∞
    const restoreDefenseFactionsFromBuffer = (buffer: Record<number, number>) => {
        setFactionCounter(prev => {
            const newCounter = { ...prev };
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞
            Object.keys(buffer).forEach(factionIdStr => {
                const factionId = parseInt(factionIdStr);
                newCounter[factionId] = buffer[factionId];
            });
            
            console.log(`üéØ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ñ—Ä–∞–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—ã –∏–∑ –±—É—Ñ–µ—Ä–∞:`, Object.keys(buffer).map(id => `${FACTIONS[parseInt(id)]}(${buffer[parseInt(id)]})`));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞
            const newActiveFactions = Object.keys(newCounter)
                .map(id => parseInt(id))
                .filter(id => newCounter[id] > 0)
                .map(id => {
                    const factionEntry = Object.entries(FACTIONS).find(([_, name]) => name === FACTIONS[id]);
                    return factionEntry ? FACTIONS[id] : `Unknown ${id}`;
                });
            
            setActiveFactions(newActiveFactions);
            
            return newCounter;
        });
    };



    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—Ä–∞–∫—Ü–∏–π –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏
    const updateActiveFactionsFromAttackCard = (card: Card) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –¥–∏–≤ –∞—Ç–∞–∫–∏ (6 –∫–∞—Ä—Ç)
        const attackCardsCount = gameState.slots?.filter(slot => slot !== null).length || 0;
        if (attackCardsCount >= 6) {
            console.log(`üö´ –î–∏–≤ –∞—Ç–∞–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω (${attackCardsCount}/6), –±–ª–æ–∫–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–π`);
            return;
        }

        if (isFirstAttackCard()) {
            // –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –µ—ë —Ñ—Ä–∞–∫—Ü–∏–∏ –∫–∞–∫ –µ–¥–∏–Ω–∏—Ü—É
            setActiveFactionsFromCard(card);
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ - —Ñ—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∫–∞–∫ –µ–¥–∏–Ω–∏—Ü–∞
            updateFactionCounter(card.factions, 1);
            console.log(`üéØ –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –∞—Ç–∞–∫–∏ - —Ñ—Ä–∞–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–∞–∫ –µ–¥–∏–Ω–∏—Ü–∞:`, getFactionNames(card.factions));
            return;
        }

        // –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞—Ä—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—ã –≤ –±—É—Ñ–µ—Ä
        const defenseBuffer = saveDefenseFactionsToBuffer(factionCounter);

        // –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —Ñ—Ä–∞–∫—Ü–∏—è–º–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏
        const firstAttackFactions = getFirstAttackCardFactions();
        const intersection = getFactionIntersection(card.factions, firstAttackFactions);
        const newActiveFactions = getFactionNames(intersection);
        
        setActiveFactions(newActiveFactions);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è
        setActiveFirstAttackFactions(intersection);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –ü–ï–†–ï–°–ï–ö–ê–Æ–©–ò–•–°–Ø —Ñ—Ä–∞–∫—Ü–∏–π –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏
        setFactionCounter(prev => {
            const newCounter: Record<number, number> = {};
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ—Ä–∞–∫—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è (–Ω–µ –≤—Å–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã!)
            intersection.forEach(factionId => {
                if (prev[factionId] && prev[factionId] > 0) {
                    newCounter[factionId] = prev[factionId];
                }
            });
            return newCounter;
        });
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—ã –∏–∑ –±—É—Ñ–µ—Ä–∞
        restoreDefenseFactionsFromBuffer(defenseBuffer);
        
        console.log(`üéØ –ö–∞—Ä—Ç–∞ –∞—Ç–∞–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –¥–∏–≤ –∞—Ç–∞–∫–∏ - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ñ—Ä–∞–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—ã:`, newActiveFactions);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—Ä–∞–∫—Ü–∏–π –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã
    const updateActiveFactionsFromDefenseCard = (card: Card) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –¥–∏–≤ –∞—Ç–∞–∫–∏ (6 –∫–∞—Ä—Ç)
        const attackCardsCount = gameState.slots?.filter(slot => slot !== null).length || 0;
        if (attackCardsCount >= 6) {
            console.log(`üö´ –î–∏–≤ –∞—Ç–∞–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω (${attackCardsCount}/6), –±–ª–æ–∫–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã`);
            return;
        }

        // –í—Å–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏
        const factionNames = getFactionNames(card.factions);
        setActiveFactions(prev => {
            const newFactions = [...new Set([...prev, ...factionNames])];
            return newFactions;
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
        updateFactionCounter(card.factions, 1);
        console.log(`üéØ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ—Ä–∞–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—ã:`, factionNames);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∞—Ç–∞–∫—É—é—â–µ–π –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ –∑–∞—â–∏—Ç–Ω—É—é
    const attachAttackCardThroughDefense = (attackCard: Card, defenseCard: Card): boolean => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –¥–∏–≤ –∞—Ç–∞–∫–∏ (6 –∫–∞—Ä—Ç)
        const attackCardsCount = gameState.slots?.filter(slot => slot !== null).length || 0;
        if (attackCardsCount >= 6) {
            console.log(`üö´ –î–∏–≤ –∞—Ç–∞–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω (${attackCardsCount}/6), –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞—â–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É`);
            return false;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã (–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ)
        const availableDefenseFactions = defenseCard.factions.filter(factionId => 
            canDefenseCardUseFaction(defenseCard, factionId)
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–π —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ñ—Ä–∞–∫—Ü–∏—è–º–∏ –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã
        const intersection = getFactionIntersection(attackCard.factions, availableDefenseFactions);
        
        if (intersection.length === 0) {
            const attackFactionNames = getFactionNames(attackCard.factions);
            const availableDefenseFactionNames = getFactionNames(availableDefenseFactions);
            const usedDefenseFactionNames = getFactionNames(defenseCard.factions.filter(factionId => 
                !canDefenseCardUseFaction(defenseCard, factionId)
            ));
            
            if (usedDefenseFactionNames.length > 0) {
                alert(`‚ùå –§—Ä–∞–∫—Ü–∏–∏: ${usedDefenseFactionNames.join(', ')} —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã –¥–ª—è –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã ${defenseCard.name}. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏: ${availableDefenseFactionNames.join(', ')}. –ê—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞: ${attackFactionNames.join(', ')}`);
            } else {
                alert(`‚ùå –ù–µ—Ç –æ–±—â–∏—Ö —Ñ—Ä–∞–∫—Ü–∏–π! –ê—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞: ${attackFactionNames.join(', ')}, –ó–∞—â–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞: ${availableDefenseFactionNames.join(', ')}`);
            }
            return false;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—ã –≤ –±—É—Ñ–µ—Ä (–∫—Ä–æ–º–µ —Ñ—Ä–∞–∫—Ü–∏–π –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏)
        const defenseBuffer = saveDefenseFactionsToBuffer(factionCounter);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏ (–æ–Ω–∏ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞—é—Ç—Å—è)
        const firstAttackFactions = getFirstAttackCardFactions();
        const firstAttackFactionNames = getFactionNames(firstAttackFactions);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ–π
        const intersectionNames = getFactionNames(intersection);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏ + –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
        const keepFactions = [...firstAttackFactions, ...intersection];
        setFactionCounter(prev => {
            const newCounter: Record<number, number> = {};
            keepFactions.forEach(factionId => {
                if (prev[factionId] && prev[factionId] > 0) {
                    newCounter[factionId] = prev[factionId];
                }
            });
            return newCounter;
        });
        
        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–Ω–∏–º–∞–µ–º –æ—Ç —Å—á—ë—Ç—á–∏–∫–∞ –≤—Å–µ —Ñ—Ä–∞–∫—Ü–∏–∏ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã
        setFactionCounter(prev => {
            const newCounter = { ...prev };
            
            // –û—Ç–Ω–∏–º–∞–µ–º –≤—Å–µ —Ñ—Ä–∞–∫—Ü–∏–∏ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã
            defenseCard.factions.forEach(factionId => {
                if (newCounter[factionId] && newCounter[factionId] > 0) {
                    newCounter[factionId] = newCounter[factionId] - 1;
                    console.log(`üéØ –û—Ç–Ω–∏–º–∞–µ–º 1 –æ—Ç ${FACTIONS[factionId]}, –æ—Å—Ç–∞–ª–æ—Å—å: ${newCounter[factionId]}`);
                    
                    // –ï—Å–ª–∏ —Å—á—ë—Ç—á–∏–∫ —Å—Ç–∞–ª 0 –∏–ª–∏ –º–µ–Ω—å—à–µ - —É–±–∏—Ä–∞–µ–º —Ñ—Ä–∞–∫—Ü–∏—é
                    if (newCounter[factionId] <= 0) {
                        delete newCounter[factionId];
                        console.log(`üéØ –£–±–∏—Ä–∞–µ–º ${FACTIONS[factionId]} (—Å—á—ë—Ç—á–∏–∫ —Å—Ç–∞–ª 0)`);
                    }
                }
            });
            
            return newCounter;
        });
        
        // –û—Ç–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã
        const defenseCardNonIntersectingFactions = defenseCard.factions.filter(factionId => !intersection.includes(factionId));
        setUsedDefenseCardFactions(prev => ({
            ...prev,
            [defenseCard.id]: [...(prev[defenseCard.id] || []), ...defenseCardNonIntersectingFactions]
        }));
        
        console.log(`üéØ –ö–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã ${defenseCard.name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ —Ñ—Ä–∞–∫—Ü–∏–∏:`, defenseCardNonIntersectingFactions.map(id => FACTIONS[id]));
        
        // –¢–µ–ø–µ—Ä—å –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ (–∫—Ä–æ–º–µ —Ñ—Ä–∞–∫—Ü–∏–π –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏)
        const filteredDefenseBuffer: Record<number, number> = {};
        
        Object.keys(defenseBuffer).forEach(factionIdStr => {
            const factionId = parseInt(factionIdStr);
            const bufferCount = defenseBuffer[factionId];
            
            // –ù–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏ (–æ–Ω–∏ —É–∂–µ –≤ —Å—á—ë—Ç—á–∏–∫–µ)
            if (!firstAttackFactions.includes(factionId)) {
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ª–∏–±–æ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è, –ª–∏–±–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –¥—Ä—É–≥–∏–º –∫–∞—Ä—Ç–∞–º –∑–∞—â–∏—Ç—ã
                if (intersection.includes(factionId)) {
                    // –≠—Ç–æ —Ñ—Ä–∞–∫—Ü–∏—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                    filteredDefenseBuffer[factionId] = bufferCount;
                    console.log(`üéØ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ${FACTIONS[factionId]} –∏–∑ –±—É—Ñ–µ—Ä–∞ (–ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è): ${bufferCount}`);
                } else if (!defenseCard.factions.includes(factionId)) {
                    // –≠—Ç–æ —Ñ—Ä–∞–∫—Ü–∏—è –æ—Ç –¥—Ä—É–≥–æ–π –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                    filteredDefenseBuffer[factionId] = bufferCount;
                    console.log(`üéØ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ${FACTIONS[factionId]} –∏–∑ –±—É—Ñ–µ—Ä–∞ (–æ—Ç –¥—Ä—É–≥–æ–π –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã): ${bufferCount}`);
                } else {
                    // –≠—Ç–æ —Ñ—Ä–∞–∫—Ü–∏—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã, –∫–æ—Ç–æ—Ä–∞—è –ù–ï –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–∞ —Ñ—Ä–∞–∫—Ü–∏—è —É –¥—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç –∑–∞—â–∏—Ç—ã
                    const hasOtherDefenseCards = defenseCards.some(card => 
                        card && card.id !== defenseCard.id && card.factions.includes(factionId)
                    );
                    
                    if (hasOtherDefenseCards) {
                        // –ï—Å—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã —Å —ç—Ç–æ–π —Ñ—Ä–∞–∫—Ü–∏–µ–π - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                        // –ö–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å", –Ω–æ –¥—Ä—É–≥–∏–µ –∫–∞—Ä—Ç—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—Ä–∞–∫—Ü–∏—é
                        filteredDefenseBuffer[factionId] = bufferCount;
                        console.log(`üéØ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ${FACTIONS[factionId]} –∏–∑ –±—É—Ñ–µ—Ä–∞ (–µ—Å—Ç—å —É –¥—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç –∑–∞—â–∏—Ç—ã, —Ç–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∞ "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å"): ${bufferCount}`);
                    } else {
                        // –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç –∑–∞—â–∏—Ç—ã —Å —ç—Ç–æ–π —Ñ—Ä–∞–∫—Ü–∏–µ–π - –ù–ï –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                        console.log(`üéØ –ù–ï –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ${FACTIONS[factionId]} –∏–∑ –±—É—Ñ–µ—Ä–∞ (–Ω–µ—Ç —É –¥—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç –∑–∞—â–∏—Ç—ã)`);
                    }
                }
            }
        });
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—ã –∏–∑ –±—É—Ñ–µ—Ä–∞
        setFactionCounter(prev => {
            const newCounter = { ...prev };
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏ –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞
            Object.keys(filteredDefenseBuffer).forEach(factionIdStr => {
                const factionId = parseInt(factionIdStr);
                newCounter[factionId] = filteredDefenseBuffer[factionId];
            });
            
            console.log(`üéØ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ñ—Ä–∞–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—ã –∏–∑ –±—É—Ñ–µ—Ä–∞:`, Object.keys(filteredDefenseBuffer).map(id => `${FACTIONS[parseInt(id)]}(${filteredDefenseBuffer[parseInt(id)]})`));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ü–û–õ–ù–û–ì–û —Å—á—ë—Ç—á–∏–∫–∞ (—Ñ—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã + –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ + —Ñ—Ä–∞–∫—Ü–∏–∏ –∑–∞—â–∏—Ç—ã)
            const allActiveFactions = Object.keys(newCounter)
                .map(id => parseInt(id))
                .filter(id => newCounter[id] > 0)
                .map(id => {
                    const factionEntry = Object.entries(FACTIONS).find(([_, name]) => name === FACTIONS[id]);
                    return factionEntry ? FACTIONS[id] : `Unknown ${id}`;
                });
            
            setActiveFactions(allActiveFactions);
            
            console.log(`üéØ –ê—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞—â–∏—Ç–Ω—É—é. –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ:`, intersectionNames);
            console.log(`üéØ –§—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏:`, firstAttackFactionNames);
            console.log(`üéØ –ò—Ç–æ–≥–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏:`, allActiveFactions);
            
            return newCounter;
        });
        
        return true;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—Ä–∞–∫—Ü–∏–π –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è)
    const updateActiveFactions = (card: Card) => {
        if (isFirstAttackCard()) {
            updateActiveFactionsFromAttackCard(card);
        } else {
            updateActiveFactionsFromAttackCard(card);
        }
    };

    const myId = currentPlayerId;
    const myHand = gameState.hands[myId] || [];
    
    // useEffect –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ div –∑–∞—â–∏—Ç—ã —Å div –∞—Ç–∞–∫–∏
    useEffect(() => {
        syncDefenseZoneSize();
    }, [gameState.slots]);

    // useEffect –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –∫–∞—Ä—Ç—ã"
    useEffect(() => {
        const canTake = checkCanTakeCards();
        setCanTakeCards(canTake);
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –∫–∞—Ä—Ç—ã": gameMode=${gameMode}, canTake=${canTake}`);
    }, [gameMode, gameState.slots, defenseCards]);

    // useEffect –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
    useEffect(() => {
        const handleMouseMove = (e: MouseEvent) => {
            if (gameMode === 'defense' && activeCard && activeCard.source === 'hand') {
                setMousePosition({ x: e.clientX, y: e.clientY });
            }
        };

        if (gameMode === 'defense' && activeCard && activeCard.source === 'hand') {
            document.addEventListener('mousemove', handleMouseMove);
        }

        return () => {
            document.removeEventListener('mousemove', handleMouseMove);
        };
    }, [gameMode, activeCard]);
    


    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∑–∂–µ)
    // const updateGame = (updater: (prev: GameState) => GameState) => {
    //     setGameState(updater);
    // };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const switchToPlayer = (playerId: string) => {
        setCurrentPlayerId(playerId);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è seed –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
    const changeSeed = (newSeed: number) => {
        setSeed(newSeed);
        setGameState(createBasicGameState(newSeed));
        setCurrentPlayerId("player-1");
    };

    // Drag & Drop —Ñ—É–Ω–∫—Ü–∏–∏
    const handleDragStart = (event: DragStartEvent) => {
        const { active } = event;
        const cardData = active.data.current as { card: Card; index: number; source: string };
        console.log('üéØ handleDragStart:', { activeId: active.id, cardData, gameMode });
        if (cardData) {
            setActiveCard(cardData);
            console.log('‚úÖ activeCard —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', cardData);
        }
    };

    const handleDragEnd = (event: DragEndEvent) => {
        const { active, over } = event;
        console.log('üéØ handleDragEnd –í–´–ó–í–ê–ù!', { activeId: active.id, overId: over?.id, gameMode });
        console.log('üîç –¢–ï–ö–£–©–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø:', { hoveredAttackCard, activeCard: !!activeCard });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ö–æ–≤–µ—Ä—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        setHoveredAttackCard(null);
        setHoveredDefenseCard(null);
        setActiveDropZone(null);
        setInvalidDefenseCard(null);
        
        if (!over) {
            console.log('‚ùå –ù–µ—Ç —Ü–µ–ª–∏ –¥–ª—è drop, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º activeCard');
            setActiveCard(null);
            setMousePosition(null);
            // –•–æ–≤–µ—Ä—ã —É–∂–µ —Å–±—Ä–æ—à–µ–Ω—ã –≤—ã—à–µ
            return;
        }

        const cardData = active.data.current as { card: Card; index: number; source: string };
        if (!cardData) {
            console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º activeCard');
            setActiveCard(null);
            setMousePosition(null);
            return;
        }

        const { card, index, source } = cardData;
        const targetZone = over.id;
        console.log('üéØ –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ:', { source, targetZone, cardName: card.name });
        console.log('üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', { 
            gameMode, 
            hoveredAttackCard,
            hoveredDefenseCard,
            activeCard: activeCard ? activeCard.card.name : null
        });

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–∞—Ä—Ç –∑–∞—â–∏—Ç—ã –≤ —Ä–µ–∂–∏–º–µ –∞—Ç–∞–∫–∏
        const targetZoneString = String(targetZone);
        console.log('üîç –ü–†–û–í–ï–†–ö–ê –£–°–õ–û–í–ò–ô:', { 
            source, 
            gameMode, 
            hoveredDefenseCard, 
            targetZone: targetZoneString,
            condition: source === 'hand' && gameMode === 'attack' && (hoveredDefenseCard !== null || targetZoneString.startsWith('defense-card-'))
        });
        
        if (source === 'hand' && gameMode === 'attack' && (hoveredDefenseCard !== null || targetZoneString.startsWith('defense-card-'))) {
            console.log('üéØ –ö–∞—Ä—Ç–∞ –æ—Ç–ø—É—â–µ–Ω–∞ –Ω–∞–¥ –∫–∞—Ä—Ç–æ–π –∑–∞—â–∏—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –¥–∏–≤ –∞—Ç–∞–∫–∏');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ä—Ç—É –∑–∞—â–∏—Ç—ã
            let defenseCard: Card | null = null;
            if (hoveredDefenseCard !== null && defenseCards[hoveredDefenseCard]) {
                defenseCard = defenseCards[hoveredDefenseCard];
            } else if (targetZoneString.startsWith('defense-card-')) {
                const defenseIndex = parseInt(targetZoneString.replace('defense-card-', ''));
                defenseCard = defenseCards[defenseIndex];
            }
            
            if (!defenseCard) {
                console.log('‚ùå –ö–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –º–µ—Ö–∞–Ω–∏–∫—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞—â–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É
            const success = attachAttackCardThroughDefense(card, defenseCard);
            if (!success) {
                setActiveCard(null);
                setMousePosition(null);
                return;
            }
            
            // –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
            let slots = gameState.slots || [];
            
            // –ï—Å–ª–∏ —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ 6 –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
            if (slots.length === 0) {
                slots = new Array(6).fill(null);
                console.log('üîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã:', slots.length);
            }
            
            const freeSlotIndex = slots.findIndex(slot => slot === null);
            console.log('üîç –°–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç:', freeSlotIndex, '–∏–∑', slots.length, '—Å–ª–æ—Ç–æ–≤');
            
            if (freeSlotIndex >= 0) {
                console.log('üéØ –î–û–ë–ê–í–õ–Ø–ï–ú –ö–ê–†–¢–£ –≤ —Å–ª–æ—Ç', freeSlotIndex);
                
                setGameState((prev) => {
                    const myCards = [...(prev.hands[myId] || [])];
                    myCards.splice(index, 1);
                    
                    const slots = [...prev.slots];
                    slots[freeSlotIndex] = card;
                    
                    return {
                        ...prev,
                        hands: { ...prev.hands, [myId]: myCards },
                        slots,
                    };
                });
                
                console.log('‚úÖ –ö–ê–†–¢–ê –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù–ê!');
            } else {
                console.log('‚ùå –ù–ï–¢ –°–í–û–ë–û–î–ù–´–• –°–õ–û–¢–û–í');
                alert('üÉè –°—Ç–æ–ª –ø–æ–ª–æ–Ω! –ú–∞–∫—Å–∏–º—É–º 6 –∫–∞—Ä—Ç.');
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            setActiveCard(null);
            setMousePosition(null);
            setHoveredDefenseCard(null);
            console.log('üîÑ –°–û–°–¢–û–Ø–ù–ò–Ø –°–ë–†–û–®–ï–ù–´');
            return;
        }

        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ —Ä—É–∫–∏ –Ω–∞ —Å—Ç–æ–ª
        if (source === 'hand' && targetZone === 'table') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º: –≤ —Ä–µ–∂–∏–º–µ –∑–∞—â–∏—Ç—ã –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª –∞—Ç–∞–∫–∏
            if (gameMode === 'defense') {
                // –í —Ä–µ–∂–∏–º–µ –∑–∞—â–∏—Ç—ã –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–±–∏—Ç—å –∫–∞—Ä—Ç—É
                // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –∫–∞—Ä—Ç—É –∞—Ç–∞–∫–∏ –¥–ª—è –æ—Ç–±–∏–≤–∞–Ω–∏—è
                const attackCards = gameState.slots?.map((slot, idx) => ({ slot, index: idx })).filter(({ slot }) => slot !== null) || [];
                
                if (attackCards.length > 0) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º hoveredAttackCard –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É
                    const targetIndex = hoveredAttackCard !== null ? hoveredAttackCard : attackCards[0].index;
                    console.log('üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –∑–∞—â–∏—Ç—ã:', targetIndex, 'hoveredAttackCard:', hoveredAttackCard);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∑–∞—â–∏—Ç—ã –Ω–∞–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π –∞—Ç–∞–∫–∏
                    const defenseAdded = addDefenseCard(targetIndex, card);
                    
                    // –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞
                    if (defenseAdded) {
                        setGameState((prev) => {
                            const myCards = [...(prev.hands[myId] || [])];
                            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–∞—Ä—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                            if (index >= 0 && index < myCards.length && myCards[index]?.id === card.id) {
                                myCards.splice(index, 1);
                                console.log(`‚úÖ –ö–∞—Ä—Ç–∞ "${card.name}" —É–±—Ä–∞–Ω–∞ –∏–∑ —Ä—É–∫–∏. –û—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ä—Ç: ${myCards.length}`);
                            } else {
                                console.log(`‚ö†Ô∏è –ö–∞—Ä—Ç–∞ "${card.name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä—É–∫–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É ${index}. –ö–∞—Ä—Ç—ã –≤ —Ä—É–∫–µ:`, myCards.map(c => c.name));
                            }
                            return {
                                ...prev,
                                hands: { ...prev.hands, [myId]: myCards },
                            };
                        });
                    } else {
                        console.log('‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã –Ω–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –∫–∞—Ä—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ä—É–∫–µ');
                    }
                    
                    // –ö–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∞
                } else {
                    alert('üõ°Ô∏è –ù–µ—Ç –∫–∞—Ä—Ç –∞—Ç–∞–∫–∏ –¥–ª—è –æ—Ç–±–∏–≤–∞–Ω–∏—è!');
                }
                setActiveCard(null);
                setMousePosition(null);
                return;
            }
            
            // –í —Ä–µ–∂–∏–º–µ –∞—Ç–∞–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ–ª (–æ–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ)
            // –°–Ω–∞—á–∞–ª–∞ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
            const validation = validateAttackCard(card);
            if (!validation.isValid) {
                alert(`‚ùå ${validation.reason}`);
                setActiveCard(null);
                setMousePosition(null);
                return;
            }
            
            // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç (–¥–æ 6 –º–∞–∫—Å–∏–º—É–º)
            let slots = gameState.slots || [];
            
            // –ï—Å–ª–∏ —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ 6 –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
            if (slots.length === 0) {
                slots = new Array(6).fill(null);
                console.log('üîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã (–æ–±—ã—á–Ω–æ–µ):', slots.length);
            }
            
            const freeSlotIndex = slots.findIndex(slot => slot === null);
            console.log('üîç –°–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç (–æ–±—ã—á–Ω–æ–µ):', freeSlotIndex, '–∏–∑', slots.length, '—Å–ª–æ—Ç–æ–≤');
            
            if (freeSlotIndex >= 0) {
                console.log('üéØ –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∞—Ç–∞–∫–∏ –≤ —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç', freeSlotIndex, '–æ–±—ã—á–Ω–æ–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏
                updateActiveFactions(card);
                
                setGameState((prev) => {
                    const myCards = [...(prev.hands[myId] || [])];
                    myCards.splice(index, 1);
                    
                    const slots = [...prev.slots];
                    slots[freeSlotIndex] = card;
                    
                    return {
                        ...prev,
                        hands: { ...prev.hands, [myId]: myCards },
                        slots,
                    };
                });
            } else {
                alert('üÉè –°—Ç–æ–ª –ø–æ–ª–æ–Ω! –ú–∞–∫—Å–∏–º—É–º 6 –∫–∞—Ä—Ç.');
            }
        }
        
        // –í–∑—è—Ç–∏–µ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞ - –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        if (source === 'table' && targetZone === 'my-hand') {
            console.log('üõ°Ô∏è –í—ã—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç —Å–æ —Å—Ç–æ–ª–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤');
            setActiveCard(null);
            setMousePosition(null);
            return;
        }

        console.log('üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º activeCard –≤ –∫–æ–Ω—Ü–µ handleDragEnd');
        setActiveCard(null);
        setMousePosition(null);
        
        // –û—á–∏—â–∞–µ–º —Ö–æ–≤–µ—Ä —ç—Ñ—Ñ–µ–∫—Ç—ã –≤–æ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–∞—Ö
        setHoveredAttackCard(null);
        setHoveredDefenseCard(null);
        setActiveDropZone(null);
        setInvalidDefenseCard(null);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏–≥—Ä—ã —Å —Ç–µ–∫—É—â–∏–º seed
    const resetGame = () => {
        setGameState(createBasicGameState(seed));
        setCurrentPlayerId("player-1");
        resetTableStates(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç
    const handleTakeCards = () => {
        if (!canTakeCards) {
            console.log('‚ùå –ù–µ–ª—å–∑—è –≤–∑—è—Ç—å –∫–∞—Ä—Ç—ã: —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
            return;
        }
        
        console.log('üéØ –í–∑—è—Ç–∏–µ –∫–∞—Ä—Ç: –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤—Å–µ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞ –≤ —Ä—É–∫—É');
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞ (–∞—Ç–∞–∫–∏ –∏ –∑–∞—â–∏—Ç—ã)
        const attackCards = gameState.slots?.filter(card => card !== null) || [];
        const defenseCardsFromTable = defenseCards.filter(card => card !== null);
        const allTableCards = [...attackCards, ...defenseCardsFromTable];
        
        console.log(`üì¶ –ö–∞—Ä—Ç—ã –¥–ª—è –≤–∑—è—Ç–∏—è: ${allTableCards.length} –∫–∞—Ä—Ç`);
        console.log('üÉè –ö–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏:', attackCards.map(card => card.name));
        console.log('üõ°Ô∏è –ö–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã:', defenseCardsFromTable.map(card => card.name));
        
        if (allTableCards.length === 0) {
            console.log('‚ö†Ô∏è –ù–∞ —Å—Ç–æ–ª–µ –Ω–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –≤–∑—è—Ç–∏—è');
            alert('‚ö†Ô∏è –ù–∞ —Å—Ç–æ–ª–µ –Ω–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –≤–∑—è—Ç–∏—è');
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        setGameState((prev) => {
            const myCards = [...(prev.hands[myId] || [])];
            const newHand = [...myCards, ...allTableCards];
            
            console.log(`‚úÖ –ö–∞—Ä—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä—É–∫—É. –ë—ã–ª–æ: ${myCards.length}, —Å—Ç–∞–ª–æ: ${newHand.length}`);
            
            return {
                ...prev,
                hands: {
                    ...prev.hands,
                    [myId]: newHand
                },
                slots: new Array(6).fill(null) // –û—á–∏—â–∞–µ–º —Å—Ç–æ–ª –æ—Ç –∫–∞—Ä—Ç –∞—Ç–∞–∫–∏, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ª–æ—Ç—ã
            };
        });
        
        // –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã
        setDefenseCards([]);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç–æ–ª–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ö–æ–¥–∞
        resetTableStates();
        
        console.log('‚úÖ –í—Å–µ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ —Ä—É–∫—É, —Å—Ç–æ–ª –æ—á–∏—â–µ–Ω');
        alert(`‚úÖ –í–∑—è—Ç–æ ${allTableCards.length} –∫–∞—Ä—Ç —Å–æ —Å—Ç–æ–ª–∞!`);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è "–ë–∏—Ç–æ" (–∑–∞–≥–æ—Ç–æ–≤–∫–∞)
    const handleBito = () => {
        console.log('üéØ –ë–∏—Ç–æ - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∑–∂–µ');
        alert('üéØ –ë–∏—Ç–æ - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∑–∂–µ');
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–¥–ª—è –±—É–¥—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã —Ö–æ–¥–æ–≤)
    const resetTableStates = () => {
        console.log('üîÑ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å—Ç–æ–ª–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ö–æ–¥–∞');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç–æ–ª–æ–º
        setHoveredAttackCard(null);
        setHoveredDefenseCard(null);
        setActiveCard(null);
        setMousePosition(null);
        setActiveDropZone(null);
        setInvalidDefenseCard(null);
        setCanTakeCards(false);
        setActiveFactions([]); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏
        setFactionCounter({}); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Ñ—Ä–∞–∫—Ü–∏–π
        setDefenseFactionsBuffer({}); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä —Ñ—Ä–∞–∫—Ü–∏–π –∑–∞—â–∏—Ç—ã
        setActiveFirstAttackFactions([]); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã
        setUsedDefenseCardFactions({}); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –∫–∞—Ä—Ç –∑–∞—â–∏—Ç—ã
        console.log('üéØ –ë—É—Ñ–µ—Ä —Ñ—Ä–∞–∫—Ü–∏–π –∑–∞—â–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω:', defenseFactionsBuffer);
        
        // –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã (—Å—Ç–æ–ª —É–∂–µ –æ—á–∏—â–µ–Ω –≤ handleTakeCards)
        setDefenseCards([]);
        
        console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç–æ–ª–∞ —Å–±—Ä–æ—à–µ–Ω—ã');
    };

    // –§—É–Ω–∫—Ü–∏–∏ —Ö–æ–≤–µ—Ä–∞ —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–Ω—ã - –≤—Å–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Å–µ–Ω—Å–æ—Ä–æ–º
    const handleAttackCardHover = (_index: number) => {
        // –ü—É—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ö–æ–≤–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Å–µ–Ω—Å–æ—Ä–æ–º
    };

    const handleAttackCardLeave = () => {
        // –ü—É—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ö–æ–≤–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Å–µ–Ω—Å–æ—Ä–æ–º
    };

    const handleDefenseCardHover = (_index: number) => {
        // –ü—É—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ö–æ–≤–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Å–µ–Ω—Å–æ—Ä–æ–º
    };

    const handleDefenseCardLeave = () => {
        // –ü—É—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ö–æ–≤–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Å–µ–Ω—Å–æ—Ä–æ–º
    };



    
    // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã –Ω–∞–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ–π –∞—Ç–∞–∫–∏
    const addDefenseCard = (attackCardIndex: number, defenseCard: Card): boolean => {
        console.log(`üõ°Ô∏è –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É –∑–∞—â–∏—Ç—ã "${defenseCard.name}" –≤ —Å–ª–æ—Ç ${attackCardIndex}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –∞—Ç–∞–∫–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        const attackCard = gameState.slots?.[attackCardIndex];
        if (!attackCard) {
            console.log(`‚ùå –ö–∞—Ä—Ç–∞ –∞—Ç–∞–∫–∏ –≤ —Å–ª–æ—Ç–µ ${attackCardIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
            return false;
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é —Å–∏–ª—É
        if (!validateDefenseCard(defenseCard, attackCard)) {
            console.log(`‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø: –ö–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã "${defenseCard.name}" (—Å–∏–ª–∞: ${defenseCard.power}) –Ω–µ –º–æ–∂–µ—Ç –∑–∞—â–∏—Ç–∏—Ç—å –æ—Ç –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏ "${attackCard.name}" (—Å–∏–ª–∞: ${attackCard.power}). –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∏–ª–∞ >= ${attackCard.power}`);
            alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å–∏–ª–∞! –ö–∞—Ä—Ç–∞ "${defenseCard.name}" (${defenseCard.power}) –Ω–µ –º–æ–∂–µ—Ç –∑–∞—â–∏—Ç–∏—Ç—å –æ—Ç "${attackCard.name}" (${attackCard.power}). –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∏–ª–∞ >= ${attackCard.power}`);
            return false;
        }
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const currentDefenseCards = [...defenseCards];
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º–∞—Å—Å–∏–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π
        while (currentDefenseCards.length <= attackCardIndex) {
            currentDefenseCards.push(null);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —É–∂–µ —Å–ª–æ—Ç
        if (currentDefenseCards[attackCardIndex] !== null) {
            console.log(`‚ùå –°–ª–æ—Ç ${attackCardIndex} —É–∂–µ –∑–∞–Ω—è—Ç –∫–∞—Ä—Ç–æ–π "${currentDefenseCards[attackCardIndex]?.name}". –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å "${defenseCard.name}"`);
            return false;
        }
        
        // –ï—Å–ª–∏ —Å–ª–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
        currentDefenseCards[attackCardIndex] = defenseCard;
        setDefenseCards(currentDefenseCards);
        console.log(`‚úÖ –ö–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–æ—Ç ${attackCardIndex}. –ú–∞—Å—Å–∏–≤:`, currentDefenseCards.map((card, idx) => card ? `${idx}:${card.name}` : `${idx}:null`));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ –∏ —Å—á—ë—Ç—á–∏–∫ –¥–ª—è –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã
        updateActiveFactionsFromDefenseCard(defenseCard);
        
        return true;
    };

    
    // –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ div –∑–∞—â–∏—Ç—ã —Å div –∞—Ç–∞–∫–∏
    const syncDefenseZoneSize = () => {
        const attackCardsCount = gameState.slots?.filter(slot => slot !== null).length || 0;
        if (attackCardsCount > defenseCards.length) {
            setDefenseCards(prev => {
                const newDefenseCards = [...prev];
                while (newDefenseCards.length < attackCardsCount) {
                    newDefenseCards.push(null);
                }
                return newDefenseCards;
            });
        }
    };



    return (
        <DndContext onDragStart={handleDragStart} onDragEnd={handleDragEnd}>
            <div style={{ 
                minHeight: "100vh", 
                width: "100vw",
                margin: 0,
                padding: 0,
                display: "flex", 
                flexDirection: "column", 
                background: "#0b1020", 
                color: "#fff",
                position: "fixed",
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                overflow: "hidden"
            }}>
                {/* Debug Header */}
                <div style={{ 
                    padding: "12px 20px", 
                    background: "#1a1a2e", 
                    borderBottom: "2px solid #8B0000",
                    display: "flex",
                    justifyContent: "space-between",
                    alignItems: "center"
                }}>
                    <div>
                        <h2 style={{ margin: 0, color: "#FFD700" }}>üéÆ Debug Game Board V2</h2>
                        <div style={{ fontSize: "12px", opacity: 0.7 }}>
                            –ö–∞—Ä—Ç –≤ —Ä—É–∫–µ: {myHand.length} | –°–ª–æ—Ç–æ–≤ –Ω–∞ —Å—Ç–æ–ª–µ: {gameState.slots?.filter(s => s !== null).length || 0} | –ö–æ–ª–æ–¥–∞: {gameState.deck.length}
                        </div>
                    </div>
                    <div style={{ display: "flex", gap: "8px", alignItems: "center" }}>
                        <div style={{ display: "flex", alignItems: "center", gap: "8px" }}>
                            <span style={{ fontSize: "12px", color: "#9CA3AF" }}>Seed:</span>
                            <input
                                type="number"
                                value={seed}
                                onChange={(e) => changeSeed(parseInt(e.target.value) || 42)}
                                style={{
                                    width: "80px",
                                    padding: "4px 8px",
                                    background: "#374151",
                                    border: "1px solid #4B5563",
                                    borderRadius: "4px",
                                    color: "#fff",
                                    fontSize: "12px"
                                }}
                            />
                        </div>
                        
                        {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ –∞—Ç–∞–∫–∞/–∑–∞—â–∏—Ç–∞ */}
                        <div style={{ display: "flex", alignItems: "center", gap: "4px" }}>
                            <button
                                onClick={() => setGameMode('attack')}
                                style={{
                                    padding: "6px 12px",
                                    background: gameMode === 'attack' ? "#dc2626" : "#374151",
                                    border: "none",
                                    borderRadius: "4px",
                                    color: "#fff",
                                    cursor: "pointer",
                                    fontSize: "11px",
                                    fontWeight: gameMode === 'attack' ? "bold" : "normal"
                                }}
                            >
                                ‚öîÔ∏è –ê—Ç–∞–∫–∞
                            </button>
                            <button
                                onClick={() => setGameMode('defense')}
                                style={{
                                    padding: "6px 12px",
                                    background: gameMode === 'defense' ? "#1d4ed8" : "#374151",
                                    border: "none",
                                    borderRadius: "4px",
                                    color: "#fff",
                                    cursor: "pointer",
                                    fontSize: "11px",
                                    fontWeight: gameMode === 'defense' ? "bold" : "normal"
                                }}
                            >
                                üõ°Ô∏è –ó–∞—â–∏—Ç–∞
                            </button>
                        </div>
                        
                        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                        <div style={{ display: "flex", alignItems: "center", gap: "8px" }}>
                            <button 
                                onClick={handleTakeCards}
                                disabled={!canTakeCards}
                                style={{
                                    padding: "8px 12px",
                                    background: canTakeCards ? "#f59e0b" : "#6b7280",
                                    border: "none",
                                    borderRadius: "6px",
                                    color: "#fff",
                                    cursor: canTakeCards ? "pointer" : "not-allowed",
                                    fontSize: "12px",
                                    opacity: canTakeCards ? 1 : 0.5
                                }}
                            >
                                üÉè –í–∑—è—Ç—å –∫–∞—Ä—Ç—ã
                            </button>
                            
                            <button 
                                onClick={handleBito}
                                style={{
                                    padding: "8px 12px",
                                    background: "#8b5cf6",
                                    border: "none",
                                    borderRadius: "6px",
                                    color: "#fff",
                                    cursor: "pointer",
                                    fontSize: "12px"
                                }}
                            >
                                üö´ –ë–∏—Ç–æ
                            </button>
                        </div>
                        
                        <button 
                            onClick={() => {
                                // –ë–µ—Ä–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã (–µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è)
                                if (gameState.deck.length > 0) {
                                    const cardFromDeck = gameState.deck[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É
                                    setGameState((prev) => ({
                                        ...prev,
                                        hands: {
                                            ...prev.hands,
                                            [myId]: [...(prev.hands[myId] || []), cardFromDeck]
                                        },
                                        deck: prev.deck.slice(1) // –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã
                                    }));
                                } else {
                                    alert("–ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞! –ù–µ—Ç –∫–∞—Ä—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.");
                                }
                            }}
                            style={{
                                padding: "8px 12px",
                                background: "#10B981",
                                border: "none",
                                borderRadius: "6px",
                                color: "#fff",
                                cursor: "pointer"
                            }}
                        >
                            + –ö–∞—Ä—Ç–∞ –∏–∑ –∫–æ–ª–æ–¥—ã ({gameState.deck.length})
                        </button>
                        <button 
                            onClick={resetGame}
                            style={{
                                padding: "8px 12px",
                                background: "#dc2626",
                                border: "none",
                                borderRadius: "6px",
                                color: "#fff",
                                cursor: "pointer"
                            }}
                        >
                            –°–±—Ä–æ—Å
                        </button>
                        <button 
                            onClick={() => setShowSensorCircle(!showSensorCircle)}
                            style={{
                                padding: "8px 12px",
                                background: showSensorCircle ? "#059669" : "#6b7280",
                                border: "none",
                                borderRadius: "6px",
                                color: "#fff",
                                cursor: "pointer"
                            }}
                        >
                            {showSensorCircle ? "–°–∫—Ä—ã—Ç—å —Å–µ–Ω—Å–æ—Ä" : "–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–Ω—Å–æ—Ä"}
                        </button>
                        {onBack && (
                            <button 
                                onClick={onBack}
                                style={{
                                    padding: "8px 12px",
                                    background: "#374151",
                                    border: "none",
                                    borderRadius: "6px",
                                    color: "#fff",
                                    cursor: "pointer"
                                }}
                            >
                                ‚Üê –ù–∞–∑–∞–¥
                            </button>
                        )}
                    </div>
                </div>

                {/* Players Info */}
                <div style={{ padding: 12, background: "#101826" }}>
                    <div style={{ display: "flex", gap: 8, flexWrap: "wrap", alignItems: "center" }}>
                        {Object.keys(gameState.players).map((pid) => (
                            <div key={pid} style={{ 
                                padding: "6px 10px", 
                                borderRadius: "6px", 
                                background: pid === myId ? "#065f46" : "#1f2937",
                                fontSize: "12px",
                                display: "flex",
                                alignItems: "center",
                                gap: "8px"
                            }}>
                                <span>
                                    {gameState.players[pid]?.name || pid}
                                    {pid === myId ? " ‚Ä¢ –≤—ã" : ""}
                                    {pid === gameState.hostId ? " üëë" : ""}
                                    {pid === gameState.currentTurn ? " ‚è≥" : ""}
                                </span>
                                <span style={{ opacity: 0.7 }}>
                                    ({gameState.hands[pid]?.length || 0} –∫–∞—Ä—Ç)
                                </span>
                                <button
                                    onClick={() => switchToPlayer(pid)}
                                    style={{
                                        padding: "2px 6px",
                                        background: pid === myId ? "#047857" : "#374151",
                                        border: "none",
                                        borderRadius: "4px",
                                        color: "#fff",
                                        cursor: "pointer",
                                        fontSize: "10px"
                                    }}
                                >
                                    {pid === myId ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–í—ã–±—Ä–∞—Ç—å"}
                                </button>
                            </div>
                        ))}
                    </div>
                </div>

                {/* Game Board */}
                <div style={{ flex: 1, display: "flex", flexDirection: "column", alignItems: "center", justifyContent: "center", padding: "20px" }}>
                    <div style={{ textAlign: "center", width: "100%" }}>
                        <h3 style={{ color: "#10B981", marginBottom: "20px" }}>
                            üéØ –ò–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª
                        </h3>
                        
                        {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–∏–≤–∞ –∑–∞—â–∏—Ç—ã —Å –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ—Ä–∞–∫—Ü–∏—è–º–∏ */}
                        <div style={{ position: "relative", marginBottom: "20px", width: "100%", display: "flex", justifyContent: "center" }}>
                            {/* –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ - –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã —Å–ª–µ–≤–∞ */}
                            {(() => {
                                // –°–æ–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ —Å–æ –≤—Å–µ—Ö –∑–∞—â–∏—Ç–Ω—ã—Ö –∫–∞—Ä—Ç
                                const allAvailableDefenseFactions: number[] = [];
                                defenseCards.forEach(defenseCard => {
                                    if (defenseCard) {
                                        const availableDefenseFactions = defenseCard.factions.filter(factionId => 
                                            canDefenseCardUseFaction(defenseCard, factionId)
                                        );
                                        allAvailableDefenseFactions.push(...availableDefenseFactions);
                                    }
                                });

                                // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ñ—Ä–∞–∫—Ü–∏—è–º–∏ –∑–∞—â–∏—Ç—ã
                                const allActiveFactionIds = [...new Set([
                                    ...activeFirstAttackFactions,
                                    ...allAvailableDefenseFactions
                                ])];

                                // –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                const displayCounter: Record<number, number> = {};
                                
                                // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—Ç –∫–∞—Ä—Ç –∞—Ç–∞–∫–∏ (—Ñ—Ä–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã)
                                activeFirstAttackFactions.forEach(factionId => {
                                    displayCounter[factionId] = (displayCounter[factionId] || 0) + (factionCounter[factionId] || 0);
                                });

                                // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—Ç –∫–∞—Ä—Ç –∑–∞—â–∏—Ç—ã (–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏)
                                allAvailableDefenseFactions.forEach(factionId => {
                                    displayCounter[factionId] = (displayCounter[factionId] || 0) + 1;
                                });

                                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ—Ä–∞–∫—Ü–∏–∏ —Å —Å—á–µ—Ç—á–∏–∫–æ–º > 0
                                const activeFactionIdsWithCount = allActiveFactionIds.filter(factionId => 
                                    displayCounter[factionId] > 0
                                );

                                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏
                                const allActiveFactionNames = getFactionNames(activeFactionIdsWithCount);

                                return allActiveFactionNames.length > 0 && (
                                <div style={{ 
                                    position: "absolute",
                                    left: "0",
                                    top: "0",
                                    width: "200px", 
                                    minHeight: "160px",
                                    background: "#1f2937", 
                                    borderRadius: "8px",
                                    border: "2px solid #4B5563",
                                    padding: "8px",
                                    display: "flex",
                                    flexDirection: "column",
                                    alignItems: "center",
                                    zIndex: 10
                                }}>
                                    <h4 style={{ color: "#F59E0B", marginBottom: "8px", fontSize: "12px" }}>
                                        üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏
                                    </h4>
                                    <div style={{ display: "flex", flexDirection: "column", gap: "4px", alignItems: "center" }}>
                                            {allActiveFactionNames.map((faction, index) => {
                                                // –ù–∞—Ö–æ–¥–∏–º ID —Ñ—Ä–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞
                                                const factionEntry = Object.entries(FACTIONS).find(([_, name]) => name === faction);
                                                const factionId = factionEntry ? parseInt(factionEntry[0]) : -1;
                                                const count = displayCounter[factionId] || 0;
                                            
                                            return (
                                                <div 
                                                        key={index}
                                                    style={{ 
                                                        color: "#E5E7EB", 
                                                        fontSize: "10px",
                                                        padding: "4px 8px",
                                                        background: "rgba(245, 158, 11, 0.1)",
                                                        borderRadius: "4px",
                                                        border: "1px solid rgba(245, 158, 11, 0.3)",
                                                        whiteSpace: "nowrap",
                                                        textAlign: "center",
                                                        display: "flex",
                                                        alignItems: "center",
                                                        gap: "4px"
                                                    }}
                                                >
                                                        <span>{faction}</span>
                                                    <span style={{ 
                                                        background: "rgba(245, 158, 11, 0.3)", 
                                                        borderRadius: "50%", 
                                                        width: "16px", 
                                                        height: "16px", 
                                                        display: "flex", 
                                                        alignItems: "center", 
                                                        justifyContent: "center",
                                                        fontSize: "8px",
                                                        fontWeight: "bold"
                                                    }}>
                                                        {count}
                                                    </span>
                                                </div>
                                            );
                                        })}
                                    </div>
                                </div>
                                );
                            })()}
                            
                            {/* –î–∏–≤ –∑–∞—â–∏—Ç—ã - –ø–æ —Ü–µ–Ω—Ç—Ä—É, –∫–∞–∫ –∏ –¥–∏–≤ –∞—Ç–∞–∫–∏ */}
                            <DefenseZone
                                attackCards={gameState.slots || []}
                                defenseCards={defenseCards}
                                onCardClick={(attackIndex) => {
                                    console.log('Clicked defense card for attack index:', attackIndex);
                                }}
                                onCardHover={handleDefenseCardHover}
                                onCardLeave={handleDefenseCardLeave}
                                highlightedCardIndex={hoveredDefenseCard}
                                gameMode={gameMode}
                                invalidDefenseCard={invalidDefenseCard}
                            />
                        </div>
                        
                        {/* –ò–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª */}
                        <div style={{ 
                            padding: "20px", 
                            background: "#1f2937", 
                            borderRadius: "12px",
                            border: "2px solid #4B5563",
                            marginBottom: "12px",
                            display: "flex",
                            flexDirection: "column",
                            alignItems: "center"
                        }}>
                            <div style={{ fontSize: "16px", marginBottom: "16px", color: "#FFD700" }}>
                                üéÆ –°–ª–æ—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ:
                            </div>
                            <DropZone
                                id="table"
                                cards={gameState.slots || []}
                                minVisibleCards={1}
                                gameMode={gameMode}
                                onCardClick={(index) => {
                                    console.log('Clicked table card:', index);
                                }}
                                onCardHover={handleAttackCardHover}
                                onCardLeave={handleAttackCardLeave}
                                highlightedCardIndex={hoveredAttackCard}
                                onMousePositionUpdate={setMousePosition}
                                activeCard={activeCard}
                                onDropZoneActivate={(zoneId) => {
                                    console.log(`üéØ –ö–£–†–°–û–†: –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç drop zone ${zoneId}`);
                                    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
                                    if (dropZoneTimeout) {
                                        clearTimeout(dropZoneTimeout);
                                        setDropZoneTimeout(null);
                                    }
                                    setActiveDropZone(zoneId);
                                }}
                                onDropZoneDeactivate={() => {
                                    console.log(`üéØ –ö–£–†–°–û–†: –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç drop zone (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)`);
                                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π
                                    const timeout = setTimeout(() => {
                                        console.log(`üéØ –ö–£–†–°–û–†: –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è drop zone –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`);
                                        setActiveDropZone(null);
                                        setDropZoneTimeout(null);
                                    }, 100); // 100ms –∑–∞–¥–µ—Ä–∂–∫–∞
                                    setDropZoneTimeout(timeout);
                                }}
                                activeDropZone={activeDropZone}
                            />
                            
                            {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}
                            {defenseCards.filter(card => card !== null).length > 0 && (
                                <div style={{ 
                                    fontSize: "12px", 
                                    color: "#93c5fd", 
                                    marginTop: "8px",
                                    textAlign: "center"
                                }}>
                                    üéØ –ö–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã: {defenseCards.filter(card => card !== null).length} –∏–∑ {defenseCards.length} —Å–ª–æ—Ç–æ–≤
                                </div>
                            )}
                        </div>
                    </div>
                </div>

                {/* My hand - –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ */}
                <div style={{ padding: 16, display: "flex", alignItems: "center", justifyContent: "center", marginBottom: "8px" }}>
                    <div style={{
                        maxWidth: "100%",
                        overflow: "hidden"
                    }}>
                        <DropZone
                            id="my-hand"
                            cards={myHand}
                            maxVisibleCards={10}
                            defenseCards={defenseCards}
                            onMousePositionUpdate={setMousePosition}
                            activeCard={activeCard}
                            onCardClick={(index) => {
                                console.log('Clicked hand card:', index);
                                
                                const card = myHand[index];
                                
                                if (gameMode === 'defense') {
                                    // –í —Ä–µ–∂–∏–º–µ –∑–∞—â–∏—Ç—ã –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–±–∏—Ç—å –∫–∞—Ä—Ç—É
                                    const attackCards = gameState.slots?.map((slot, idx) => ({ slot, index: idx })).filter(({ slot }) => slot !== null) || [];
                                    
                                    if (attackCards.length > 0) {
                                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º hoveredAttackCard –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É
                                        const targetIndex = hoveredAttackCard !== null ? hoveredAttackCard : attackCards[0].index;
                                        console.log('üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –∑–∞—â–∏—Ç—ã (–∫–ª–∏–∫):', targetIndex, 'hoveredAttackCard:', hoveredAttackCard);
                                        
                                        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∑–∞—â–∏—Ç—ã –Ω–∞–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π –∞—Ç–∞–∫–∏
                                        const defenseAdded = addDefenseCard(targetIndex, card);
                                        
                                        // –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞
                                        if (defenseAdded) {
                                            setGameState((prev) => {
                                                const myCards = [...(prev.hands[myId] || [])];
                                                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–∞—Ä—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                                                if (index >= 0 && index < myCards.length && myCards[index]?.id === card.id) {
                                                    myCards.splice(index, 1);
                                                    console.log(`‚úÖ –ö–∞—Ä—Ç–∞ "${card.name}" —É–±—Ä–∞–Ω–∞ –∏–∑ —Ä—É–∫–∏ (–∫–ª–∏–∫). –û—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ä—Ç: ${myCards.length}`);
                                                } else {
                                                    console.log(`‚ö†Ô∏è –ö–∞—Ä—Ç–∞ "${card.name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä—É–∫–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É ${index} (–∫–ª–∏–∫). –ö–∞—Ä—Ç—ã –≤ —Ä—É–∫–µ:`, myCards.map(c => c.name));
                                                }
                                                return {
                                                    ...prev,
                                                    hands: { ...prev.hands, [myId]: myCards },
                                                };
                                            });
                                        } else {
                                            console.log('‚ö†Ô∏è –ö–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã –Ω–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–∫–ª–∏–∫), –∫–∞—Ä—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ä—É–∫–µ');
                                        }
                                    } else {
                                        alert('üõ°Ô∏è –ù–µ—Ç –∫–∞—Ä—Ç –∞—Ç–∞–∫–∏ –¥–ª—è –æ—Ç–±–∏–≤–∞–Ω–∏—è!');
                                    }
                                    return;
                                }
                                
                                // –í —Ä–µ–∂–∏–º–µ –∞—Ç–∞–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ–ª
                                // –°–Ω–∞—á–∞–ª–∞ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
                                const validation = validateAttackCard(card);
                                if (!validation.isValid) {
                                    alert(`‚ùå ${validation.reason}`);
                                    return;
                                }
                                
                                // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–µ—Ä–≤—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç (–¥–æ 6 –º–∞–∫—Å–∏–º—É–º)
                                let slots = gameState.slots || [];
                                
                                // –ï—Å–ª–∏ —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ 6 –ø—É—Å—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤
                                if (slots.length === 0) {
                                    slots = new Array(6).fill(null);
                                    console.log('üîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã (–∫–ª–∏–∫):', slots.length);
                                }
                                
                                const freeSlotIndex = slots.findIndex(slot => slot === null);
                                console.log('üîç –°–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç (–∫–ª–∏–∫):', freeSlotIndex, '–∏–∑', slots.length, '—Å–ª–æ—Ç–æ–≤');
                                
                                if (freeSlotIndex >= 0) {
                                    console.log('üéØ –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∞—Ç–∞–∫–∏ –≤ —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç', freeSlotIndex, '(–∫–ª–∏–∫)');
                                    
                                    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏
                                    updateActiveFactions(card);
                                    
                                    setGameState((prev) => {
                                        const myCards = [...(prev.hands[myId] || [])];
                                        myCards.splice(index, 1);
                                        
                                        const slots = [...prev.slots];
                                        slots[freeSlotIndex] = card;
                                        
                                        return {
                                            ...prev,
                                            hands: { ...prev.hands, [myId]: myCards },
                                            slots,
                                        };
                                    });
                                } else {
                                    alert('üÉè –°—Ç–æ–ª –ø–æ–ª–æ–Ω! –ú–∞–∫—Å–∏–º—É–º 6 –∫–∞—Ä—Ç.');
                                }
                            }}
                        />
                    </div>
                </div>

                {/* Debug Info */}
                <div style={{ 
                    padding: "12px 20px", 
                    background: "#1a1a2e", 
                    borderTop: "2px solid #8B0000",
                    fontSize: "12px",
                    opacity: 0.8
                }}>
                    <div>üîÑ Debug V2 –∞–∫—Ç–∏–≤–µ–Ω | üé≤ Seed: {seed} | {gameMode === 'attack' ? '‚öîÔ∏è –†–µ–∂–∏–º –∞—Ç–∞–∫–∏' : 'üõ°Ô∏è –†–µ–∂–∏–º –∑–∞—â–∏—Ç—ã'} | üÉè {myHand.length}/6 –∫–∞—Ä—Ç | üìö –ö–æ–ª–æ–¥–∞: {gameState.deck.length} –∫–∞—Ä—Ç | üñ±Ô∏è Drag & Drop –∞–∫—Ç–∏–≤–µ–Ω</div>
                                    <div style={{ marginTop: "4px", fontSize: "10px", opacity: 0.6 }}>
                    üéØ –û—Ç–ª–∞–¥–∫–∞: activeCard={activeCard ? `${activeCard.card.name} (${activeCard.source})` : '–Ω–µ—Ç'} | –ù–∞–≤–µ–¥–µ–Ω–∏–µ –∞—Ç–∞–∫–∏={hoveredAttackCard !== null ? `–∫–∞—Ä—Ç–∞ ${hoveredAttackCard}` : '–Ω–µ—Ç'} | –ù–∞–≤–µ–¥–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã={hoveredDefenseCard !== null ? `–∫–∞—Ä—Ç–∞ ${hoveredDefenseCard}` : '–Ω–µ—Ç'} | –ú—ã—à—å={mousePosition ? `${mousePosition.x},${mousePosition.y}` : '–Ω–µ—Ç'} | –ó–∞—â–∏—Ç–∞={defenseCards.filter(card => card !== null).length} –∫–∞—Ä—Ç | –ê—Ç–∞–∫–∞={gameState.slots?.filter(s => s !== null).length || 0} –∫–∞—Ä—Ç
                </div>
                <div style={{ marginTop: "2px", fontSize: "9px", opacity: 0.5 }}>
                    üõ°Ô∏è –°–ª–æ—Ç—ã –∑–∞—â–∏—Ç—ã: {defenseCards.map((card, idx) => card ? `${idx}:${card.name}` : `${idx}:–ø—É—Å—Ç–æ`).join(' | ')}
                </div>
                <div style={{ marginTop: "2px", fontSize: "9px", opacity: 0.5 }}>
                    üÉè –ö–∞—Ä—Ç—ã –≤ —Ä—É–∫–µ: {myHand.map((card, idx) => `${idx}:${card.name}`).join(' | ')}
                </div>
                <div style={{ marginTop: "2px", fontSize: "9px", opacity: 0.5 }}>
                    üñ±Ô∏è –°–µ–Ω—Å–æ—Ä: {gameMode === 'attack' ? '–∏—â–µ—Ç –∫–∞—Ä—Ç—ã (–∑–∞—â–∏—Ç–∞ > –∞—Ç–∞–∫–∞)' : '–∏—â–µ—Ç –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏'} | –†–∞–¥–∏—É—Å: 80px | –ö—É—Ä—Å–æ—Ä: {mousePosition ? `${mousePosition.x}, ${mousePosition.y}` : '–Ω–µ—Ç'} | –ê–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞: {activeCard ? `${activeCard.card.name} (${activeCard.source})` : '–Ω–µ—Ç'} | –û—Ç–ª–∞–¥–∫–∞: {showSensorCircle ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}
                </div>
                </div>

                {/* –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–µ–Ω—Å–æ—Ä–∞ - –≤ —Ä–µ–∂–∏–º–µ –∞—Ç–∞–∫–∏ –ø—Ä–∏ –∑–∞–∂–∞—Ç–æ–π –∫–∞—Ä—Ç–µ –∏–ª–∏ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ –æ—Ç–ª–∞–¥–∫–∏ */}
                {(activeCard || showSensorCircle) && mousePosition && (
                    <div
                        style={{
                            position: 'fixed',
                            left: mousePosition.x - 80,
                            top: mousePosition.y - 80,
                            width: '160px',
                            height: '160px',
                            border: '2px dashed rgba(255, 255, 0, 0.5)',
                            borderRadius: '50%',
                            pointerEvents: 'none',
                            zIndex: 9999,
                            background: 'rgba(255, 255, 0, 0.1)'
                        }}
                    />
                )}

                {/* Drag Overlay */}
                <DragOverlay>
                    {activeCard ? (
                        <div style={{
                            height: 160,
                            width: 120,
                            borderRadius: 12,
                            border: activeCard.source === 'hand' 
                                ? "2px solid #8B0000" 
                                : "2px solid #334155",
                            background: "linear-gradient(135deg, #2a2a4e 0%, #1e1e3e 100%)",
                            color: "#fff",
                            display: "flex",
                            flexDirection: "column",
                            alignItems: "center",
                            justifyContent: "center",
                            padding: "8px",
                            transform: "rotate(5deg) scale(1.05)",
                            boxShadow: "0 8px 25px rgba(139, 0, 0, 0.4)",
                            zIndex: 1000,
                        }}>
                            <div style={{ 
                                fontSize: "12px", 
                                fontWeight: "bold", 
                                textAlign: "center", 
                                marginBottom: "4px",
                                color: "#FFD700"
                            }}>
                                {activeCard.card.name}
                            </div>
                            <div style={{ 
                                fontSize: "18px", 
                                color: "#8B0000", 
                                fontWeight: "bold",
                                textShadow: "1px 1px 2px rgba(0,0,0,0.8)"
                            }}>
                                {activeCard.card.power}
                            </div>
                            <div style={{
                                position: "absolute",
                                top: "-10px",
                                right: "-10px",
                                background: "#8B0000",
                                color: "#fff",
                                borderRadius: "50%",
                                width: "20px",
                                height: "20px",
                                display: "flex",
                                alignItems: "center",
                                justifyContent: "center",
                                fontSize: "12px",
                                fontWeight: "bold"
                            }}>
                                {activeCard.card.power}
                            </div>
                        </div>
                    ) : null}
                </DragOverlay>

                {/* –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–≤–∏–¥–∏–º–æ–≥–æ –∫—Ä—É–≥–∞ —Å–µ–Ω—Å–æ—Ä–∞ */}
                {showSensorCircle && mousePosition && (
                    <div style={{
                        position: "fixed",
                        left: mousePosition.x - 80,
                        top: mousePosition.y - 80,
                        width: 160,
                        height: 160,
                        borderRadius: "50%",
                        border: "2px dashed #8B5CF6",
                        background: "rgba(139, 92, 246, 0.1)",
                        pointerEvents: "none",
                        zIndex: 9999,
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        fontSize: "12px",
                        color: "#8B5CF6",
                        fontWeight: "bold"
                    }}>
                        –°–µ–Ω—Å–æ—Ä (80px)
                    </div>
                )}
            </div>
        </DndContext>
    );
};

export default DebugGameBoardV2;
